import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as t}from"./app-DeNibpf_.js";const e={},p=t(`<h2 id="数据库表设计-范式化" tabindex="-1"><a class="header-anchor" href="#数据库表设计-范式化"><span>数据库表设计-范式化</span></a></h2><p>范式来自英文Normal Form，简称NF。MySQL是关系型数据库，但是要想设计—个好的关系，必须使关系满足一定的约束条件，此约束已经形成了规范，分成几个等级，一级比一级要求得严格。满足这些规范的数据库是简洁的、结构明晰的，同时，不会发生插入(insert)、删除(delete)和更新(update)操作异常。反之则是乱七八糟，不仅给数据库的编程人员制造麻烦，而且面目可憎，可能存储了大量不需要的冗余信息。</p><p>目前关系数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、第四范式(4NF）和第五范式（5NF，又称完美范式）。满足最低要求的范式是第一范式（1NF）。在第一范式的基础上进一步满足更多规范要求的称为第二范式（2NF），其余范式以次类推。一般来说，数据库只需满足第三范式(3NF）就行了。</p><h3 id="第一范式" tabindex="-1"><a class="header-anchor" href="#第一范式"><span>第一范式</span></a></h3><p>定义：属于第一范式关系的所有属性都不可再分，即数据项不可分。</p><p>如：</p><table><thead><tr><th style="text-align:center;"><strong>id</strong></th><th style="text-align:center;"><strong>name-age</strong></th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">张三-18</td></tr></tbody></table><p>name-age不符合第一范式，可将其拆分</p><table><thead><tr><th style="text-align:center;"><strong>id</strong></th><th style="text-align:center;"><strong>name</strong></th><th style="text-align:center;"><strong>age</strong></th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">张三</td><td style="text-align:center;">18</td></tr></tbody></table><h3 id="第二范式" tabindex="-1"><a class="header-anchor" href="#第二范式"><span>第二范式</span></a></h3><p>定义：第二范式（2NF）要求数据库表中的每个实例或行必须可以被惟一地区分。通常在实现来说，需要为表加上一个列，以存储各个实例的惟一标识。例如员工信息表中加上了员工编号（emp_id）列，因为每个员工的员工编号是惟一的，因此每个员工可以被惟一区分。这个惟一属性列被称为主关键字或主键、主码。<br><strong>通俗来说，表中数据需要主键或唯一索引。</strong></p><h3 id="第三范式" tabindex="-1"><a class="header-anchor" href="#第三范式"><span>第三范式</span></a></h3><p>定义：指每一个非主属性既不部分依赖于也不传递依赖于业务主键，也就是在第二范式的基础上消除了非主键对主键的传递依赖。例如，存在一个部门信息表，其中每个部门有部门编号（dept_id）、部门名称、部门简介等信息。那么在员工信息表中列出部门编号后就不能再将部门名称、部门简介等与部门有关的信息再加入员工信息表中。如果不存在部门信息表，则根据第三范式（3NF）也应该构建它，否则就会有大量的数据冗余。<br><strong>通俗来说就是个需要关联关系表将相关信息进行关联</strong></p><h3 id="反范式化设计" tabindex="-1"><a class="header-anchor" href="#反范式化设计"><span>反范式化设计</span></a></h3><p>完全符合范式化的设计真的完美无缺吗？很明显在实际的业务查询中会大量存在着表的关联查询，而大量的表关联很多的时候非常影响查询的性能。<br> 所谓得反范式化就是为了性能和读取效率得考虑而适当得对数据库设计范式得要求进行违反。允许存在少量得冗余，换句话来说反范式化就是使用空间来换取时间。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><h3 id="范式化设计的优缺点" tabindex="-1"><a class="header-anchor" href="#范式化设计的优缺点"><span>范式化设计的优缺点</span></a></h3><h4 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h4><ol><li>范式化设计的表结构，更新操作会比反范式化快。</li><li>范式化设计的表结构，存储空间比反范式化小。</li><li>范式化设计的表，数据冗余较小，若出现需要修改的情况，修改位置，修改数据量较小，通常只修改一处即可。</li><li>很少有多余的数据，在检索列表时，可以更少的使用distinct和order by</li></ol><h4 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span>缺点</span></a></h4><ol><li>范式化设计的表通常需要连表查询才能得到所有结果。稍微复杂一点的查询语句，可能需要关联多张表，此时查询语句执行效率变低，也可能会导致一些表索引失效。</li></ol><h3 id="反范式化设计的优缺点" tabindex="-1"><a class="header-anchor" href="#反范式化设计的优缺点"><span>反范式化设计的优缺点</span></a></h3><h4 id="优点-1" tabindex="-1"><a class="header-anchor" href="#优点-1"><span>优点</span></a></h4><ol><li>反范式化设计，可以减少表的关联。</li><li>可以更好的进行索引优化。</li></ol><h4 id="缺点-1" tabindex="-1"><a class="header-anchor" href="#缺点-1"><span>缺点</span></a></h4><ol><li>数据冗余，维护成本变高，可能会出现数据错误或不一致情况。</li><li>对数据修改需要考虑的地方更多</li></ol><h2 id="实际工作中的反范式化" tabindex="-1"><a class="header-anchor" href="#实际工作中的反范式化"><span>实际工作中的反范式化</span></a></h2><h3 id="_1-缓存和汇总" tabindex="-1"><a class="header-anchor" href="#_1-缓存和汇总"><span>1.缓存和汇总</span></a></h3><p>最常见的反范式化方法是对数据进行缓存，在不同的表中存储特定的列，将本来需要连表查询的语句，通过表结构，改为单表查询。<br> 汇总也是一种反范式化方式，将经常需要用到的汇总且结果不变的数据，存入一张表中，每天只做一次加工后，后续查询既可不用加工数据。此种方式常见于报表等情况。<br> 在使用缓存表和汇总表时，有个关键点是如何维护缓存表和汇总表中的数据，常用的有两种方式，<strong>实时维护数据</strong>和<strong>定期重建</strong>，这个取决于应用程序，不过一般来说，缓存表用实时维护数据更多点，往往在一个事务中同时更新数据本表和缓存表，汇总表则用定期重建更多，使用定时任务对汇总表进行更新。</p><h3 id="_2-计数器表" tabindex="-1"><a class="header-anchor" href="#_2-计数器表"><span>2.计数器表</span></a></h3><p>计数器表在Web应用中很常见。比如网站点击数、用户的朋友数、文件下载次数等。对于高并发下的处理，首先可以创建一张独立的表存储计数器，这样可使计数器表小且快，并且可以使用一些更高级的技巧。</p><p>比如假设有一个计数器表，只有一行数据，记录网站的点击次数，网站的每次点击都会导致对计数器进行更新，问题在于，对于任何想要更新这一行的事务来说，这条记录上都有一个全局的互斥锁(mutex)。这会使得这些事务只能串行执行，会严重限制系统的并发能力。</p><p>可以将计数器保存在多行中，每次随机选择一行进行更新。在具体实现上，可以增加一个槽（slot)字段，然后预先在这张表增加100行或者更多数据，当对计数器更新时，选择一个随机的槽（slot)进行更新即可。</p><p>这种解决思路其实就是写热点的分散，在JDK的JDK1.8中新的原子类LongAdder也是这种处理方式，而我们在实际的缓冲中间件Redis等的使用、架构设计中，可以采用这种写热点的分散的方式，当然架构设计中对于写热点还有削峰填谷的处理方式，这种在MySQL的实现中也有体现。</p><p>其实还有一种方式是这类计数器类更新操作可以在程序中用线程实现，将计数类操作与业务解耦，实现更好的业务体验。</p><h3 id="_3-字段类型优化" tabindex="-1"><a class="header-anchor" href="#_3-字段类型优化"><span>3.字段类型优化</span></a></h3><ul><li>02-Mysql索引优化一</li><li>03-Mysql索引优化二</li></ul><h3 id="_4-mysql索引" tabindex="-1"><a class="header-anchor" href="#_4-mysql索引"><span>4.mysql索引</span></a></h3><h4 id="按结构分" tabindex="-1"><a class="header-anchor" href="#按结构分"><span>按结构分</span></a></h4><ul><li>B+树索引</li><li>哈希索引</li><li>FULLTEXT(全文索引，现在innodb也支持了)</li></ul><h4 id="按物理角度分" tabindex="-1"><a class="header-anchor" href="#按物理角度分"><span>按物理角度分</span></a></h4><ul><li>聚集索引</li><li>非聚集索引</li></ul><h3 id="mrr" tabindex="-1"><a class="header-anchor" href="#mrr"><span>MRR</span></a></h3><p>每次从二级索引/非聚簇索引中读取到一条记录后，就会根据该记录的主键值执行回表操作。而在某个扫描区间中的二级索引记录的主键值是无序的，也就是说这些二级索引记录对应的聚簇索引记录所在的页面的页号是无序的。每次执行回表操作时都相当于要随机读取一个聚簇索引页面，而这些随机IO带来的性能开销比较大。MySQL中提出了一个名为Disk-SweepMulti-RangeRead(MRR，多范围读取)的优化措施，即先读取一部分二级索引记录，将它们的主键值排好序之后再统一执行回表操作。相对于每读取一条二级索引记录就立即执行回表操作，这样会节省一些IO开销。使用这个MRR优化措施的条件比较苛刻，所以我们直接认为每读取一条二级索引记录就立即执行回表操作。MRR的详细信息，可以查询官方文档。</p><h3 id="如何创建高性能索引" tabindex="-1"><a class="header-anchor" href="#如何创建高性能索引"><span>如何创建高性能索引</span></a></h3><h4 id="索引列的类型大小尽可能小" tabindex="-1"><a class="header-anchor" href="#索引列的类型大小尽可能小"><span><strong>索引列的类型大小尽可能小</strong></span></a></h4><p>在定义列时，需要指定列的类型，比如tinyint、int、bigint所占空间是依次增大的，我们要表示的数据类型大小是可以根据业务推断出来的，在选择列类型时，尽量在满足业务要求的条件下，选择占用空间小的类型，这样的列在做索引时，每个索引页可存储的数据就更多，减少了索引I/O读取带来的消耗。</p><h4 id="利用索引离散化选择和前缀索引" tabindex="-1"><a class="header-anchor" href="#利用索引离散化选择和前缀索引"><span><strong>利用索引离散化选择和前缀索引</strong></span></a></h4><p>创建索引时候优先选择离散性强的列。索引离散型指不重复索引的数量与数据总量的比值，这个比值越大越好。当这个比值越大，说明该字段不重复的可能性越大，通过索引筛选出的数据较少，可以过滤掉更多的行。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> order_no<span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> order_exp<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="前缀索引" tabindex="-1"><a class="header-anchor" href="#前缀索引"><span><strong>前缀索引</strong></span></a></h4><p>有的时候需要将很长的字段添加索引，这时不需要将所有长度全部加上索引，否则会让索引变长变慢，因此可以索引该字段的开始部分，这样可以节约索引空间，提高索引效率</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> 
    <span class="token function">COUNT</span><span class="token punctuation">(</span> <span class="token keyword">DISTINCT</span> <span class="token keyword">LEFT</span> <span class="token punctuation">(</span> order_note<span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> sel3<span class="token punctuation">,</span>
    <span class="token function">COUNT</span><span class="token punctuation">(</span> <span class="token keyword">DISTINCT</span> <span class="token keyword">LEFT</span> <span class="token punctuation">(</span> order_note<span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> sel4<span class="token punctuation">,</span>
    <span class="token function">COUNT</span><span class="token punctuation">(</span> <span class="token keyword">DISTINCT</span> <span class="token keyword">LEFT</span> <span class="token punctuation">(</span> order_note<span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> sel5<span class="token punctuation">,</span>
    <span class="token function">COUNT</span><span class="token punctuation">(</span> <span class="token keyword">DISTINCT</span> <span class="token keyword">LEFT</span> <span class="token punctuation">(</span> order_note<span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> sel6<span class="token punctuation">,</span>
    <span class="token function">COUNT</span><span class="token punctuation">(</span> <span class="token keyword">DISTINCT</span> <span class="token keyword">LEFT</span> <span class="token punctuation">(</span> order_note<span class="token punctuation">,</span> <span class="token number">7</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> sel7<span class="token punctuation">,</span>
    <span class="token function">COUNT</span><span class="token punctuation">(</span> <span class="token keyword">DISTINCT</span> <span class="token keyword">LEFT</span> <span class="token punctuation">(</span> order_note<span class="token punctuation">,</span> <span class="token number">8</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> sel8<span class="token punctuation">,</span>
    <span class="token function">COUNT</span><span class="token punctuation">(</span> <span class="token keyword">DISTINCT</span> <span class="token keyword">LEFT</span> <span class="token punctuation">(</span> order_note<span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> sel9<span class="token punctuation">,</span>
    <span class="token function">COUNT</span><span class="token punctuation">(</span> <span class="token keyword">DISTINCT</span> <span class="token keyword">LEFT</span> <span class="token punctuation">(</span> order_note<span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> sel10<span class="token punctuation">,</span>
    <span class="token function">COUNT</span><span class="token punctuation">(</span> <span class="token keyword">DISTINCT</span> <span class="token keyword">LEFT</span> <span class="token punctuation">(</span> order_note<span class="token punctuation">,</span> <span class="token number">11</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> sel11<span class="token punctuation">,</span>
    <span class="token function">COUNT</span><span class="token punctuation">(</span> <span class="token keyword">DISTINCT</span> <span class="token keyword">LEFT</span> <span class="token punctuation">(</span> order_note<span class="token punctuation">,</span> <span class="token number">12</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> sel12<span class="token punctuation">,</span>
    <span class="token function">COUNT</span><span class="token punctuation">(</span> <span class="token keyword">DISTINCT</span> <span class="token keyword">LEFT</span> <span class="token punctuation">(</span> order_note<span class="token punctuation">,</span> <span class="token number">13</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> sel13<span class="token punctuation">,</span>
    <span class="token function">COUNT</span><span class="token punctuation">(</span> <span class="token keyword">DISTINCT</span> <span class="token keyword">LEFT</span> <span class="token punctuation">(</span> order_note<span class="token punctuation">,</span> <span class="token number">14</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> sel14<span class="token punctuation">,</span>
    <span class="token function">COUNT</span><span class="token punctuation">(</span> <span class="token keyword">DISTINCT</span> <span class="token keyword">LEFT</span> <span class="token punctuation">(</span> order_note<span class="token punctuation">,</span> <span class="token number">15</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> sel15<span class="token punctuation">,</span>
    <span class="token function">COUNT</span><span class="token punctuation">(</span> <span class="token keyword">DISTINCT</span> order_note <span class="token punctuation">)</span><span class="token operator">/</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> total 
<span class="token keyword">FROM</span>
    order_exp<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在阿里的编码规范中，长字段做索引时，建议用字段的前20位作为索引，但根据经验，一般13-15个字符长度即可</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> order_exp <span class="token keyword">ADD</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>order_note<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="只为用于搜索、排序、分组的列创建索引" tabindex="-1"><a class="header-anchor" href="#只为用于搜索、排序、分组的列创建索引"><span><strong>只为用于搜索、排序、分组的列创建索引</strong></span></a></h4><p>即为where、order by、group by后面的条件列创建索引，出现在查询列表中的列可不建立索引，除非是为了进行索引覆盖。order by和group by的顺序，需要和索引建立的顺序一致，才能使用索引。例如，一个表的索引是(name,age,sex)，则order by name,age,sex;语句可以利用索引在建立时的排序，直接从索引中读取主键信息，回表查询其余列，而order by age,sex,name;语句则不能利用索引，需要在内存中重新排序后才能查询出需要的数据。group by同理。</p><h4 id="尽可能设计三星索引" tabindex="-1"><a class="header-anchor" href="#尽可能设计三星索引"><span><strong>尽可能设计三星索引</strong></span></a></h4><ul><li>索引将所有记录放到一起获得一星；</li><li>如果索引中的顺序和查询的排序顺序一致，获得二星；</li><li>索引中的列包含了查询中所需要的列，获得三星。</li></ul><p>其中，三星一般是最重要的，二星和一星重要性相差不大。</p><h4 id="主键尽量是不改变的" tabindex="-1"><a class="header-anchor" href="#主键尽量是不改变的"><span><strong>主键尽量是不改变的</strong></span></a></h4><p>主键在设计时，尽量不要频繁update，当需要updat主键时，已经平衡的页需要频繁的分裂和合并，会严重影响性能。</p>`,62),o=[p];function l(c,i){return s(),a("div",null,o)}const d=n(e,[["render",l],["__file","07-表结构及索引设计.html.vue"]]),k=JSON.parse('{"path":"/statudy/Mysql/07-%E8%A1%A8%E7%BB%93%E6%9E%84%E5%8F%8A%E7%B4%A2%E5%BC%95%E8%AE%BE%E8%AE%A1.html","title":"07-表结构及索引设计","lang":"zh-CN","frontmatter":{"title":"07-表结构及索引设计","order":6,"date":"2024-04-17T00:00:00.000Z","category":["Mysql"],"tag":["Mysql"],"description":"数据库表设计-范式化 范式来自英文Normal Form，简称NF。MySQL是关系型数据库，但是要想设计—个好的关系，必须使关系满足一定的约束条件，此约束已经形成了规范，分成几个等级，一级比一级要求得严格。满足这些规范的数据库是简洁的、结构明晰的，同时，不会发生插入(insert)、删除(delete)和更新(update)操作异常。反之则是乱七八糟...","head":[["meta",{"property":"og:url","content":"https://xsyl06.github.io/myblog/myblog/statudy/Mysql/07-%E8%A1%A8%E7%BB%93%E6%9E%84%E5%8F%8A%E7%B4%A2%E5%BC%95%E8%AE%BE%E8%AE%A1.html"}],["meta",{"property":"og:site_name","content":"Xsyl06的博客"}],["meta",{"property":"og:title","content":"07-表结构及索引设计"}],["meta",{"property":"og:description","content":"数据库表设计-范式化 范式来自英文Normal Form，简称NF。MySQL是关系型数据库，但是要想设计—个好的关系，必须使关系满足一定的约束条件，此约束已经形成了规范，分成几个等级，一级比一级要求得严格。满足这些规范的数据库是简洁的、结构明晰的，同时，不会发生插入(insert)、删除(delete)和更新(update)操作异常。反之则是乱七八糟..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-18T10:40:05.000Z"}],["meta",{"property":"article:author","content":"xsyl06"}],["meta",{"property":"article:tag","content":"Mysql"}],["meta",{"property":"article:published_time","content":"2024-04-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-18T10:40:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"07-表结构及索引设计\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-17T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-18T10:40:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xsyl06\\",\\"url\\":\\"https://gitee.com/xsyl06\\"}]}"]]},"headers":[{"level":2,"title":"数据库表设计-范式化","slug":"数据库表设计-范式化","link":"#数据库表设计-范式化","children":[{"level":3,"title":"第一范式","slug":"第一范式","link":"#第一范式","children":[]},{"level":3,"title":"第二范式","slug":"第二范式","link":"#第二范式","children":[]},{"level":3,"title":"第三范式","slug":"第三范式","link":"#第三范式","children":[]},{"level":3,"title":"反范式化设计","slug":"反范式化设计","link":"#反范式化设计","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[{"level":3,"title":"范式化设计的优缺点","slug":"范式化设计的优缺点","link":"#范式化设计的优缺点","children":[{"level":4,"title":"优点","slug":"优点","link":"#优点","children":[]},{"level":4,"title":"缺点","slug":"缺点","link":"#缺点","children":[]}]},{"level":3,"title":"反范式化设计的优缺点","slug":"反范式化设计的优缺点","link":"#反范式化设计的优缺点","children":[{"level":4,"title":"优点","slug":"优点-1","link":"#优点-1","children":[]},{"level":4,"title":"缺点","slug":"缺点-1","link":"#缺点-1","children":[]}]}]},{"level":2,"title":"实际工作中的反范式化","slug":"实际工作中的反范式化","link":"#实际工作中的反范式化","children":[{"level":3,"title":"1.缓存和汇总","slug":"_1-缓存和汇总","link":"#_1-缓存和汇总","children":[]},{"level":3,"title":"2.计数器表","slug":"_2-计数器表","link":"#_2-计数器表","children":[]},{"level":3,"title":"3.字段类型优化","slug":"_3-字段类型优化","link":"#_3-字段类型优化","children":[]},{"level":3,"title":"4.mysql索引","slug":"_4-mysql索引","link":"#_4-mysql索引","children":[{"level":4,"title":"按结构分","slug":"按结构分","link":"#按结构分","children":[]},{"level":4,"title":"按物理角度分","slug":"按物理角度分","link":"#按物理角度分","children":[]}]},{"level":3,"title":"MRR","slug":"mrr","link":"#mrr","children":[]},{"level":3,"title":"如何创建高性能索引","slug":"如何创建高性能索引","link":"#如何创建高性能索引","children":[{"level":4,"title":"索引列的类型大小尽可能小","slug":"索引列的类型大小尽可能小","link":"#索引列的类型大小尽可能小","children":[]},{"level":4,"title":"利用索引离散化选择和前缀索引","slug":"利用索引离散化选择和前缀索引","link":"#利用索引离散化选择和前缀索引","children":[]},{"level":4,"title":"前缀索引","slug":"前缀索引","link":"#前缀索引","children":[]},{"level":4,"title":"只为用于搜索、排序、分组的列创建索引","slug":"只为用于搜索、排序、分组的列创建索引","link":"#只为用于搜索、排序、分组的列创建索引","children":[]},{"level":4,"title":"尽可能设计三星索引","slug":"尽可能设计三星索引","link":"#尽可能设计三星索引","children":[]},{"level":4,"title":"主键尽量是不改变的","slug":"主键尽量是不改变的","link":"#主键尽量是不改变的","children":[]}]}]}],"git":{"createdTime":1713436805000,"updatedTime":1713436805000,"contributors":[{"name":"Wang","email":"xsyl06@qq.com","commits":1}]},"readingTime":{"minutes":9.96,"words":2989},"filePathRelative":"statudy/Mysql/07-表结构及索引设计.md","localizedDate":"2024年4月17日","excerpt":"<h2>数据库表设计-范式化</h2>\\n<p>范式来自英文Normal Form，简称NF。MySQL是关系型数据库，但是要想设计—个好的关系，必须使关系满足一定的约束条件，此约束已经形成了规范，分成几个等级，一级比一级要求得严格。满足这些规范的数据库是简洁的、结构明晰的，同时，不会发生插入(insert)、删除(delete)和更新(update)操作异常。反之则是乱七八糟，不仅给数据库的编程人员制造麻烦，而且面目可憎，可能存储了大量不需要的冗余信息。</p>\\n<p>目前关系数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、第四范式(4NF）和第五范式（5NF，又称完美范式）。满足最低要求的范式是第一范式（1NF）。在第一范式的基础上进一步满足更多规范要求的称为第二范式（2NF），其余范式以次类推。一般来说，数据库只需满足第三范式(3NF）就行了。</p>","autoDesc":true}');export{d as comp,k as data};
