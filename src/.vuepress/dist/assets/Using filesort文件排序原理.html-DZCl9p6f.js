import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as o,a as r}from"./app-C_5Scca9.js";const i={},l=r('<h2 id="filesort文件排序方式" tabindex="-1"><a class="header-anchor" href="#filesort文件排序方式"><span>filesort文件排序方式</span></a></h2><ul><li><strong>单路排序：</strong> 是一次性取出满足条件行的所有字段，然后在sort buffer中进行排序；用trace工具可以看到sort_mode信息里显示&lt; sort_key, additional_fields &gt;或者&lt; sort_key, packed_additional_fields &gt;</li><li><strong>双路排序（又叫回表​排序模式）：</strong> 是首先根据相应的条件取出相应的排序字段和可以直接定位行数据的行 ID，然后在 sort buffer 中进行排序，排序完后需要再次取回其它需要的字段；用trace工具可以看到sort_mode信息里显示&lt; sort_key, rowid &gt;</li></ul><p><strong>MySQL 通过比较系统变量 max_length_for_sort_data(默认1024字节) 的大小和需要查询的字段总大小来判断使用哪种排序模式。</strong></p><ul><li>如果字段的总长度小于max_length_for_sort_data，那么使用单路排序模式；</li><li>如果字段的总长度大于max_length_for_sort_data，那么使用双路排序模式；</li></ul><h3 id="单路排序的详细过程" tabindex="-1"><a class="header-anchor" href="#单路排序的详细过程"><span><strong>单路排序的详细过程</strong></span></a></h3><ol><li>从索引name找到第一个满足 name = ‘zhuge’ 条件的主键 id</li><li>根据主键 id 取出整行，<strong>取出所有字段的值，存入 sort_buffer 中</strong></li><li>从索引name找到下一个满足 name = ‘zhuge’ 条件的主键 id</li><li><strong>重复步骤 2、3 直到不满足 name = ‘zhuge’</strong></li><li>对 sort_buffer 中的数据按照字段 position 进行排序</li><li>返回结果给客户端</li></ol><h3 id="双路排序的详细过程" tabindex="-1"><a class="header-anchor" href="#双路排序的详细过程"><span><strong>双路排序的详细过程</strong></span></a></h3><ol><li>从索引 name 找到第一个满足 name = ‘zhuge’ 的主键id</li><li>根据主键 id 取出整行，把排序字段 position 和主键 id 这两个字段放到 sort buffer 中</li><li>从索引 name 取下一个满足 name = ‘zhuge’ 记录的主键 id</li><li>重复 3、4 直到不满足 name = ‘zhuge’</li><li>对 sort_buffer 中的字段 position 和主键 id 按照字段 position 进行排序</li><li>遍历排序好的 id 和字段 position，按照 id 的值<strong>回到原表中</strong>取出所有字段的值返回给客户端</li></ol><p>其实对比两个排序模式，单路排序会把所有需要查询的字段都放到 sort buffer 中，而双路排序只会把主键和需要排序的字段放到 sort buffer 中进行排序，然后再通过主键回到原表查询需要的字段。</p><ul><li><p>如果 MySQL 排序内存(sort buffer)配置的比较小并且没有条件继续增加了，可以适当把 max_length_for_sort_data 配置小点，让优化器选择使用双路排序算法，可以在sort_buffer 中一次排序更多的行，只是需要再根据主键回到原表取数据。</p></li><li><p>如果 MySQL 排序内存(sort buffer)有条件可以配置比较大，可以适当增大 max_length_for_sort_data 的值，让优化器优先选择全字段排序(单路排序)，把需要的字段放到 sort_buffer 中，这样排序后就会直接从内存里返回查询结果了。</p></li></ul><p>所以，MySQL通过 <strong>max_length_for_sort_data</strong> 这个参数来控制排序，在不同场景使用不同的排序模式，从而提升排序效率。</p><p><strong>注意：</strong> 虽然全部使用sort_buffer内存排序一般情况下效率会高于磁盘文件排序，但不能因为这个就<strong>随便</strong>增大sort_buffer(默认1M)，mysql很多参数设置都是做过优化的，不建议轻易调整。</p><p>‍</p>',13),s=[l];function a(n,d){return e(),o("div",null,s)}const g=t(i,[["render",a],["__file","Using filesort文件排序原理.html.vue"]]),p=JSON.parse('{"path":"/statudy/Mysql/Using%20filesort%E6%96%87%E4%BB%B6%E6%8E%92%E5%BA%8F%E5%8E%9F%E7%90%86.html","title":"Using filesort文件排序原理","lang":"zh-CN","frontmatter":{"title":"Using filesort文件排序原理","index":false,"date":"2024-04-12T00:00:00.000Z","category":["Mysql"],"tag":["Mysql"],"description":"filesort文件排序方式 单路排序： 是一次性取出满足条件行的所有字段，然后在sort buffer中进行排序；用trace工具可以看到sort_mode信息里显示< sort_key, additional_fields >或者< sort_key, packed_additional_fields > 双路排序（又叫回表​排序模式）： 是首先根...","head":[["meta",{"property":"og:url","content":"https://xsyl06.github.io/myblog/myblog/statudy/Mysql/Using%20filesort%E6%96%87%E4%BB%B6%E6%8E%92%E5%BA%8F%E5%8E%9F%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"Xsyl06的博客"}],["meta",{"property":"og:title","content":"Using filesort文件排序原理"}],["meta",{"property":"og:description","content":"filesort文件排序方式 单路排序： 是一次性取出满足条件行的所有字段，然后在sort buffer中进行排序；用trace工具可以看到sort_mode信息里显示< sort_key, additional_fields >或者< sort_key, packed_additional_fields > 双路排序（又叫回表​排序模式）： 是首先根..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"xsyl06"}],["meta",{"property":"article:tag","content":"Mysql"}],["meta",{"property":"article:published_time","content":"2024-04-12T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Using filesort文件排序原理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-12T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xsyl06\\",\\"url\\":\\"https://gitee.com/xsyl06\\"}]}"]]},"headers":[{"level":2,"title":"filesort文件排序方式","slug":"filesort文件排序方式","link":"#filesort文件排序方式","children":[{"level":3,"title":"单路排序的详细过程","slug":"单路排序的详细过程","link":"#单路排序的详细过程","children":[]},{"level":3,"title":"双路排序的详细过程","slug":"双路排序的详细过程","link":"#双路排序的详细过程","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.78,"words":833},"filePathRelative":"statudy/Mysql/Using filesort文件排序原理.md","localizedDate":"2024年4月12日","excerpt":"<h2>filesort文件排序方式</h2>\\n<ul>\\n<li><strong>单路排序：</strong> 是一次性取出满足条件行的所有字段，然后在sort buffer中进行排序；用trace工具可以看到sort_mode信息里显示&lt; sort_key, additional_fields &gt;或者&lt; sort_key, packed_additional_fields &gt;</li>\\n<li><strong>双路排序（又叫回表​排序模式）：</strong> 是首先根据相应的条件取出相应的排序字段和可以直接定位行数据的行 ID，然后在 sort buffer 中进行排序，排序完后需要再次取回其它需要的字段；用trace工具可以看到sort_mode信息里显示&lt; sort_key, rowid &gt;</li>\\n</ul>","autoDesc":true}');export{g as comp,p as data};
