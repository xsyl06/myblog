import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as a,a as e}from"./app-C_5Scca9.js";const t="/myblog/assets/img/image-20231127111535-5c1xzma.png",l="/myblog/assets/img/image-20231127112322-mbyxpb8.png",o="/myblog/assets/img/image-20231127112419-rp76ptt.png",i="/myblog/assets/img/image-20231127112429-ycfwljv.png",r="/myblog/assets/img/image-20231127112727-ydzcxfk.png",p="/myblog/assets/img/image-20231127112804-i244dnj.png",c="/myblog/assets/img/image-20231127112808-tjsls74.png",d="/myblog/assets/img/image-20231127113028-xlh0k1f.png",g="/myblog/assets/img/image-20231127113036-p9byk58.png",m="/myblog/assets/img/image-20231127113100-elxe5b8.png",h="/myblog/assets/img/image-20231127113104-zk4ep3j.png",u="/myblog/assets/img/image-20231127152509-2dh8tn5.png",k="/myblog/assets/img/image-20231127155844-rfj0byk.png",b={},y=e('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>数据库通常会并发的执行多个事务，这些事务可能会对同一条数据进行增删改等操作，这可能会产生脏读，脏写，不可重复读等问题。</p><p>这些问题的本质就是数据的并发问题，所以数据库设计了事务隔离、锁等机制来解决多事务并发问题。</p><h2 id="事务及acid属性" tabindex="-1"><a class="header-anchor" href="#事务及acid属性"><span>事务及ACID属性</span></a></h2><ul><li><strong>原子性：</strong> 一个事务内的所有sql语句要么同时成功，要么同时失败，这条是操作层面的，原子性由undo log来实现。</li><li><strong>一致性：</strong> 事务开始和结束时，数据需要保持一致，即一个事务内多条sql修改的数据，要么都成功，要么都失败，这条主要时数据层面的。</li><li><strong>隔离性：</strong> 数据库需提供一定隔离性，保证每个事务在并发情况下，有自己“独立”的执行空间，不受其他事务影响。</li><li><strong>持久性：</strong> 事务提交后对数据的修改是永久性的，不应受系统影响。</li></ul><h2 id="并发事务带来的问题" tabindex="-1"><a class="header-anchor" href="#并发事务带来的问题"><span>并发事务带来的问题</span></a></h2><ul><li><strong>脏写：</strong> 当两个或多个事务同时选定了一条数据进行更新，由于不知道其他事务的存在，都是基于最初查询的值进行更新，会导致最后提交的更新覆盖之前提交的更新。</li><li><strong>脏读：</strong> 当一个事务A对一条数据进行修改，读取到了另一个事务B对该数据未提交的修改，在A事务数据根据之前读取的修改后，事务B进行了回滚，此时A事务的基础数据即是错误数据，不符合一致性要求。</li><li><strong>不可重复读：</strong> 一个事务按相同查询条件查询数据，不同时间点出现了数据前后不一致情况，即事务A读取一次数据后，事务B修改了该条数据并提交，然后事务A再次读取该条数据时，发现数据被修改和删除了；不符合隔离性要求。</li><li><strong>幻读：</strong> 一个事务重新读取之前的查询结果，读取到了其他事务插入的满足查询条件的数据，就是幻读，不符合隔离性。</li></ul><h2 id="数据库锁分类" tabindex="-1"><a class="header-anchor" href="#数据库锁分类"><span>数据库锁分类</span></a></h2><p>锁是计算机协调多个线程或进程并发访问同一资源的机制，</p><p>数据库中，除了计算传统的资源(CPU、RAM、I/O)外，数据库内数据也是一种资源，会面临多个事务并发访问或修改同一条数据的问题。如何保证数据在并发情况下的一致性，有效性，是所有数据库需要解决的一个问题。锁冲突也是影响并发效率的一个方面。</p><h3 id="锁分类" tabindex="-1"><a class="header-anchor" href="#锁分类"><span>锁分类</span></a></h3><ul><li><p>从性能上分为<strong>乐观锁</strong>(用版本比对)和<strong>悲观锁</strong>；</p></li><li><p>从对数据库的操作上分为<strong>读锁</strong>和<strong>写锁</strong></p><ul><li><strong>读锁</strong>：针对同一份数据，多个读之间不影响，该session的写操作会报错，其余session的写操作会阻塞。<br> select * from dual lock in share mode;</li><li><strong>写锁：</strong> 当前的写操作没有执行完，不释放锁，其他session的写操作和读操作会阻塞。<br> slelect * from dual for update;</li></ul></li><li><p>从对数据的操作粒度上分为<strong>表锁</strong>和<strong>行锁</strong></p><ul><li><strong>表锁：</strong> 每次操作锁住整张表。开销小，加锁快；锁定颗粒度大，锁冲突概率高，几乎不会出现并发问题。一般用于整表数据迁移场景。</li></ul></li></ul><h3 id="表锁" tabindex="-1"><a class="header-anchor" href="#表锁"><span>表锁</span></a></h3><p>对某一个表加表锁：lock table 表名 read/write;</p><p>​<img src="'+t+'" alt="image">​</p><p>查看表状态：show open tables;</p><p>​<img src="'+l+'" alt="image">​</p><h4 id="添加读锁的情况" tabindex="-1"><a class="header-anchor" href="#添加读锁的情况"><span>添加读锁的情况</span></a></h4><p>对表添加读锁后，当前session更新数据会报错</p><p>​<img src="'+o+'" alt="image">​</p><p>此时，因为加的是<strong>读锁</strong>，当前session和其他session均可以读出数据</p><p>​<img src="'+i+'" alt="image">​</p><p>其余session修改会阻塞</p><p>​<img src="'+r+'" alt="image">​</p><p>当释放锁后其余session语句会继续执行</p><p>​<img src="'+p+'" alt="image">​</p><p>​<img src="'+c+'" alt="image">​</p><h4 id="添加写锁情况" tabindex="-1"><a class="header-anchor" href="#添加写锁情况"><span>添加写锁情况</span></a></h4><p>添加写锁后，自己可正常读取，可正常修改</p><p>​​<img src="'+d+'" alt="image">​​</p><p>其他session读取会阻塞</p><p>​<img src="'+g+'" alt="image">​</p><p>释放后其余session可以读取到。</p><p>​<img src="'+m+'" alt="image">​</p><p>​<img src="'+h+`" alt="image">​</p><p>结论：</p><ol><li>对MyISAM表的读操作(加读锁) ,不会阻塞其他进程对同一表的读请求,但会阻塞对同一表的写请求。只有当读锁释放后,才会执行其它进程的写操作。</li><li>对MylSAM表的写操作(加写锁) ,会阻塞其他进程对同一表的读和写操作,只有当写锁释放后,才会执行其它进程的读写操作</li></ol><h3 id="行锁" tabindex="-1"><a class="header-anchor" href="#行锁"><span>行锁</span></a></h3><p>每次操作对某行数据进行加锁，加锁开销大，加锁慢，会出现死锁情况，锁定颗粒度小，发生锁冲突的概率低，并发能力高。<strong>InnoDB支持事务及行级锁</strong></p><h2 id="事务的隔离级别" tabindex="-1"><a class="header-anchor" href="#事务的隔离级别"><span>事务的隔离级别</span></a></h2><table><thead><tr><th style="text-align:center;"><strong>隔离级别</strong></th><th><strong>脏读</strong></th><th><strong>不可重复读</strong></th><th><strong>幻读</strong></th></tr></thead><tbody><tr><td style="text-align:center;"><strong>读未提交</strong>read-uncommitted</td><td><strong>可能出现</strong></td><td><strong>可能出现</strong></td><td><strong>可能出现</strong></td></tr><tr><td style="text-align:center;"><strong>读已提交</strong>reda-committed</td><td><strong>不可能出现</strong></td><td><strong>可能出现</strong></td><td><strong>可能出现</strong></td></tr><tr><td style="text-align:center;"><strong>可重复读</strong>repeatable-read</td><td><strong>不可能出现</strong></td><td><strong>不可能出现</strong></td><td><strong>可能出现</strong></td></tr><tr><td style="text-align:center;"><strong>串行化</strong>serializable</td><td><strong>不可能出现</strong></td><td><strong>不可能出现</strong></td><td><strong>不可能出现</strong></td></tr></tbody></table><p>数据库事务隔离级别越严格，并发影响的越小，当代价也越高<br> 查看数据库事务隔离级别的语句：show variables like &#39;tx_isolation&#39;;<br> 设置数据库事务隔离级别的语句：set tx_isolaticton=&#39;read-uncommitted&#39;<br> mysql8的关键字为： transaction_isolation</p><h3 id="读未提交" tabindex="-1"><a class="header-anchor" href="#读未提交"><span>读未提交</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">set</span> transaction_isolation<span class="token operator">=</span><span class="token string">&#39;read-uncommitted&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>1、打开客户端A，设置隔离级别为读未提交<br> 2、打开客户端B，设置隔离级别为读未提交<br> 3、在客户端B中，修改lilei的balances-50但不提交，并在A中查询，显示减少了50<br> 4、在A客户端中，在B客户端修改了数据后，再次进行数据计算，balance-50，此时事务被阻塞，说明B事务在更新数据时添加了行级锁<br> 5、此时B进行了回滚后，所有的操作都将会被撤销，那客户端A查询到的数据其实就是脏数据。此时A如果再进行balance-50，其值也是400，因为数据库会拿真实数据进行计算。</p><h3 id="读已提交" tabindex="-1"><a class="header-anchor" href="#读已提交"><span>读已提交</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">set</span> transaction_isolation<span class="token operator">=</span><span class="token string">&#39;read-committed&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>1、客户端A设置隔离模式为读已提交，此时A开启事务，正常读取数据<br> 2、客户端B设置隔离模式为读已提交，此时B开启事务，此时B更新相同数据不提交。<br> 3、客户端A再次查询数据，数据不变，解决了脏读问题。<br> 4、客户端B提交事务。此时客户端A再查一次，查询到客户端B修改的数据，没有满足可重复读要求，对代码编写有很大影响。</p><h3 id="可重复读" tabindex="-1"><a class="header-anchor" href="#可重复读"><span>可重复读</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">set</span> transaction_isolation<span class="token operator">=</span><span class="token string">&#39;repeatable-read&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>1、客户端A设置隔离模式为可重复读，此时A开启事务，正常读取数据。<br> 2、客户端B设置隔离模式为可重复读，此时B开启事务，修改一条数据不提交。<br> 3、客户端A再次查询数据，数据不变，解决了脏读问题。<br> 4、客户端B提交事务。此时客户端A再查一次，查询到仍为第一次查询的数据(mysql通过MVCC机制读取历史版本)，解决了不可重复读问题。<br> 5、如果事务A需要修改数据，需要考虑其他事务修改的情况。</p><h3 id="串行化" tabindex="-1"><a class="header-anchor" href="#串行化"><span><strong>串行化</strong></span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">set</span> transaction_isolation<span class="token operator">=</span><span class="token string">&#39;serializable&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>1、客户端A设置隔离模式为串行化，此时A开启事务，正常读取数据。<br> 2、客户端B设置隔离模式为串行化，此时B可以正常读取数据，但修改A正读取的数据时，会阻塞。<br> 3、当客户端A提交事务后，其余事务才可以继续操作数据。</p><h2 id="间隙锁" tabindex="-1"><a class="header-anchor" href="#间隙锁"><span><strong>间隙锁</strong></span></a></h2><p>间隙锁，锁的就是两个值之间的空隙。Mysql默认级别是repeatable-read，有办法解决幻读问题吗？间隙锁在某些情况下可以解决幻读问题。间隙锁是在可重复读隔离级别下才会生效。</p><p>​<img src="`+u+`" alt="image">​</p><p>在Session_1下面执行 update account set name = &#39;zhuge&#39; where id &gt; 8 and id &lt;18;，则其他Session没法在这个范围所包含的所有行记录(包括间隙行记录)以及行记录所在的间隙里插入或修改任何数据，即id在(3,20]区间都无法修改数据，注意最后那个20也是包含在内的。</p><h3 id="临键锁-next-key-locks" tabindex="-1"><a class="header-anchor" href="#临键锁-next-key-locks"><span>临键锁(Next-key Locks)</span></a></h3><p><strong>临键锁</strong>是行锁与间隙锁的组合。像上面那个例子里的这个(3,20]的整个区间可以叫做临键锁。其实主要是最后那个<strong>20。</strong>\\n 无索引行锁会升级为表锁(RR级别会升级为表锁，RC级别不会升级为表锁)<br> 因为锁主要加在索引上，如果更新条件为非索引字段，在可重复读的隔离级别下，行锁可能会升级为表锁。</p><p><strong>InnoDB的行锁是针对索引加的锁，不是针对记录加的锁。并且该索引不能失效，否则都会从行锁升级为表锁。</strong></p><h2 id="结论" tabindex="-1"><a class="header-anchor" href="#结论"><span>结论</span></a></h2><p>​Innodb存储引擎由于实现了行级锁定，虽然在锁定机制的实现方面所带来的性能损耗可能比表级锁定会要更高一下，但是在整体并发处理能力方面要远远优于MYISAM的表级锁定的。当系统并发量高的时候，Innodb的整体性能和MYISAM相比就会有比较明显的优势了。</p><p>但是，Innodb的行级锁定同样也有其脆弱的一面，当我们使用不当的时候，可能会让Innodb的整体性能表现不仅不能比MYISAM高，甚至可能会更差。</p><h2 id="锁分析" tabindex="-1"><a class="header-anchor" href="#锁分析"><span>锁分析</span></a></h2><h3 id="_1、通过检查innodb-row-lock状态变量来分析系统上的行锁的争夺情况" tabindex="-1"><a class="header-anchor" href="#_1、通过检查innodb-row-lock状态变量来分析系统上的行锁的争夺情况"><span>1、通过检查InnoDB_row_lock状态变量来分析系统上的行锁的争夺情况</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">show</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">&#39;innodb_row_lock%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对各个状态量的说明如下：</p><ul><li>Innodb_row_lock_current_waits: 当前正在等待锁定的数量</li><li>Innodb_row_lock_time: 从系统启动到现在锁定总时间长度</li><li>Innodb_row_lock_time_avg: 每次等待所花平均时间</li><li>Innodb_row_lock_time_max：从系统启动到现在等待最长的一次所花时间</li><li>Innodb_row_lock_waits: 系统启动后到现在总共等待的次数</li></ul><p>当等待次数很高，且等待所花平均时间较长时，需要分析为什么有这么多等待，然后根据分析结果进行优化。</p><h3 id="_2、查看infomation-schema库中锁相关表" tabindex="-1"><a class="header-anchor" href="#_2、查看infomation-schema库中锁相关表"><span>2、查看infomation_schema库中锁相关表</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 查看事务</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> INFORMATION_SCHEMA<span class="token punctuation">.</span>INNODB_TRX<span class="token punctuation">;</span>

<span class="token comment">-- 查看锁</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> INFORMATION_SCHEMA<span class="token punctuation">.</span>INNODB_LOCKS<span class="token punctuation">;</span>

<span class="token comment">-- 8.0查看锁</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">\`</span>performance_schema<span class="token punctuation">\`</span></span><span class="token punctuation">.</span>data_locks

<span class="token comment">-- 查看锁等待</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> INFORMATION_SCHEMA<span class="token punctuation">.</span>INNODB_LOCK_WAITS<span class="token punctuation">;</span>

<span class="token comment">-- 8.0查看锁等待</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">\`</span>performance_schema<span class="token punctuation">\`</span></span><span class="token punctuation">.</span>data_lock_waits<span class="token punctuation">;</span>

<span class="token comment">-- 释放锁，trx_mysql_thread_id可以从INNODB_TRX表里查看到</span>
<span class="token keyword">kill</span> trx_mysql_thread_id

<span class="token comment">-- 查看锁等待详细信息</span>
<span class="token keyword">show</span> <span class="token keyword">engine</span> <span class="token keyword">innodb</span> <span class="token keyword">status</span>\\G<span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="死锁" tabindex="-1"><a class="header-anchor" href="#死锁"><span><strong>死锁</strong></span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>A:<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> account <span class="token keyword">for</span> <span class="token keyword">update</span><span class="token punctuation">;</span>
B:<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> actor <span class="token keyword">for</span> <span class="token keyword">update</span><span class="token punctuation">;</span>
A:<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> actor <span class="token keyword">for</span> <span class="token keyword">update</span><span class="token punctuation">;</span>
B:<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> account <span class="token keyword">for</span> <span class="token keyword">update</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​<img src="`+k+'" alt="image">​</p><p>最后可以看到mysql会自动检测出死锁的情况，并回滚产生死锁的那个事务，但有些情况数据库没法检测到。</p><h3 id="锁优化建议" tabindex="-1"><a class="header-anchor" href="#锁优化建议"><span><strong>锁优化建议</strong></span></a></h3><ul><li>更新时尽可能让所有数据检索都通过索引来完成，避免无索引行锁升级为表锁。</li><li>合理设计索引，尽量缩小锁的范围。</li><li>尽可能减少检索条件范围，避免间隙锁。</li><li>尽量控制事务大小，减少锁定资源量和时间长度，涉及事务加锁的sql尽量放在事务最后执行。</li><li>尽可能低级别事务隔离。</li></ul>',78),_=[y];function v(x,A){return n(),a("div",null,_)}const q=s(b,[["render",v],["__file","04-理解Mysql事务隔离级别及锁机制.html.vue"]]),B=JSON.parse('{"path":"/statudy/Mysql/04-%E7%90%86%E8%A7%A3Mysql%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E5%8F%8A%E9%94%81%E6%9C%BA%E5%88%B6.html","title":"04-Mysql事务隔离级别及锁机制","lang":"zh-CN","frontmatter":{"title":"04-Mysql事务隔离级别及锁机制","order":4,"date":"2024-04-14T00:00:00.000Z","category":["Mysql"],"tag":["Mysql"],"description":"概述 数据库通常会并发的执行多个事务，这些事务可能会对同一条数据进行增删改等操作，这可能会产生脏读，脏写，不可重复读等问题。 这些问题的本质就是数据的并发问题，所以数据库设计了事务隔离、锁等机制来解决多事务并发问题。 事务及ACID属性 原子性： 一个事务内的所有sql语句要么同时成功，要么同时失败，这条是操作层面的，原子性由undo log来实现。 ...","head":[["meta",{"property":"og:url","content":"https://xsyl06.github.io/myblog/myblog/statudy/Mysql/04-%E7%90%86%E8%A7%A3Mysql%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E5%8F%8A%E9%94%81%E6%9C%BA%E5%88%B6.html"}],["meta",{"property":"og:site_name","content":"Xsyl06的博客"}],["meta",{"property":"og:title","content":"04-Mysql事务隔离级别及锁机制"}],["meta",{"property":"og:description","content":"概述 数据库通常会并发的执行多个事务，这些事务可能会对同一条数据进行增删改等操作，这可能会产生脏读，脏写，不可重复读等问题。 这些问题的本质就是数据的并发问题，所以数据库设计了事务隔离、锁等机制来解决多事务并发问题。 事务及ACID属性 原子性： 一个事务内的所有sql语句要么同时成功，要么同时失败，这条是操作层面的，原子性由undo log来实现。 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://xsyl06.github.io/myblog/myblog/assets/img/image-20231127111535-5c1xzma.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"xsyl06"}],["meta",{"property":"article:tag","content":"Mysql"}],["meta",{"property":"article:published_time","content":"2024-04-14T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"04-Mysql事务隔离级别及锁机制\\",\\"image\\":[\\"https://xsyl06.github.io/myblog/myblog/assets/img/image-20231127111535-5c1xzma.png\\",\\"https://xsyl06.github.io/myblog/myblog/assets/img/image-20231127112322-mbyxpb8.png\\",\\"https://xsyl06.github.io/myblog/myblog/assets/img/image-20231127112419-rp76ptt.png\\",\\"https://xsyl06.github.io/myblog/myblog/assets/img/image-20231127112429-ycfwljv.png\\",\\"https://xsyl06.github.io/myblog/myblog/assets/img/image-20231127112727-ydzcxfk.png\\",\\"https://xsyl06.github.io/myblog/myblog/assets/img/image-20231127112804-i244dnj.png\\",\\"https://xsyl06.github.io/myblog/myblog/assets/img/image-20231127112808-tjsls74.png\\",\\"https://xsyl06.github.io/myblog/myblog/assets/img/image-20231127113028-xlh0k1f.png\\",\\"https://xsyl06.github.io/myblog/myblog/assets/img/image-20231127113036-p9byk58.png\\",\\"https://xsyl06.github.io/myblog/myblog/assets/img/image-20231127113100-elxe5b8.png\\",\\"https://xsyl06.github.io/myblog/myblog/assets/img/image-20231127113104-zk4ep3j.png\\",\\"https://xsyl06.github.io/myblog/myblog/assets/img/image-20231127152509-2dh8tn5.png\\",\\"https://xsyl06.github.io/myblog/myblog/assets/img/image-20231127155844-rfj0byk.png\\"],\\"datePublished\\":\\"2024-04-14T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xsyl06\\",\\"url\\":\\"https://gitee.com/xsyl06\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"事务及ACID属性","slug":"事务及acid属性","link":"#事务及acid属性","children":[]},{"level":2,"title":"并发事务带来的问题","slug":"并发事务带来的问题","link":"#并发事务带来的问题","children":[]},{"level":2,"title":"数据库锁分类","slug":"数据库锁分类","link":"#数据库锁分类","children":[{"level":3,"title":"锁分类","slug":"锁分类","link":"#锁分类","children":[]},{"level":3,"title":"表锁","slug":"表锁","link":"#表锁","children":[{"level":4,"title":"添加读锁的情况","slug":"添加读锁的情况","link":"#添加读锁的情况","children":[]},{"level":4,"title":"添加写锁情况","slug":"添加写锁情况","link":"#添加写锁情况","children":[]}]},{"level":3,"title":"行锁","slug":"行锁","link":"#行锁","children":[]}]},{"level":2,"title":"事务的隔离级别","slug":"事务的隔离级别","link":"#事务的隔离级别","children":[{"level":3,"title":"读未提交","slug":"读未提交","link":"#读未提交","children":[]},{"level":3,"title":"读已提交","slug":"读已提交","link":"#读已提交","children":[]},{"level":3,"title":"可重复读","slug":"可重复读","link":"#可重复读","children":[]},{"level":3,"title":"串行化","slug":"串行化","link":"#串行化","children":[]}]},{"level":2,"title":"间隙锁","slug":"间隙锁","link":"#间隙锁","children":[{"level":3,"title":"临键锁(Next-key Locks)","slug":"临键锁-next-key-locks","link":"#临键锁-next-key-locks","children":[]}]},{"level":2,"title":"结论","slug":"结论","link":"#结论","children":[]},{"level":2,"title":"锁分析","slug":"锁分析","link":"#锁分析","children":[{"level":3,"title":"1、通过检查InnoDB_row_lock状态变量来分析系统上的行锁的争夺情况","slug":"_1、通过检查innodb-row-lock状态变量来分析系统上的行锁的争夺情况","link":"#_1、通过检查innodb-row-lock状态变量来分析系统上的行锁的争夺情况","children":[]},{"level":3,"title":"2、查看infomation_schema库中锁相关表","slug":"_2、查看infomation-schema库中锁相关表","link":"#_2、查看infomation-schema库中锁相关表","children":[]},{"level":3,"title":"死锁","slug":"死锁","link":"#死锁","children":[]},{"level":3,"title":"锁优化建议","slug":"锁优化建议","link":"#锁优化建议","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":9.87,"words":2962},"filePathRelative":"statudy/Mysql/04-理解Mysql事务隔离级别及锁机制.md","localizedDate":"2024年4月14日","excerpt":"<h2>概述</h2>\\n<p>数据库通常会并发的执行多个事务，这些事务可能会对同一条数据进行增删改等操作，这可能会产生脏读，脏写，不可重复读等问题。</p>\\n<p>这些问题的本质就是数据的并发问题，所以数据库设计了事务隔离、锁等机制来解决多事务并发问题。</p>\\n<h2>事务及ACID属性</h2>\\n<ul>\\n<li><strong>原子性：</strong> 一个事务内的所有sql语句要么同时成功，要么同时失败，这条是操作层面的，原子性由undo log来实现。</li>\\n<li><strong>一致性：</strong> 事务开始和结束时，数据需要保持一致，即一个事务内多条sql修改的数据，要么都成功，要么都失败，这条主要时数据层面的。</li>\\n<li><strong>隔离性：</strong> 数据库需提供一定隔离性，保证每个事务在并发情况下，有自己“独立”的执行空间，不受其他事务影响。</li>\\n<li><strong>持久性：</strong> 事务提交后对数据的修改是永久性的，不应受系统影响。</li>\\n</ul>","autoDesc":true}');export{q as comp,B as data};
