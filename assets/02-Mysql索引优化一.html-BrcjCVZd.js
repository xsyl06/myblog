import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o,c as l,d as c,e as s,b as i,w as r,a}from"./app-tWsBgK15.js";const u="/myblog/assets/img/image-20231124102228-y347wo8.png",k="/myblog/assets/img/image-20231124103455-c3nep7f.png",n="/myblog/assets/img/image-20231124103444-qro4gzx.png",d="/myblog/assets/img/image-20231124103514-op88a5t.png",m="/myblog/assets/img/image-20231124103526-cna15it.png",g="/myblog/assets/img/image-20231124103546-ndsr6yn.png",v="/myblog/assets/img/image-20231124103600-663u6lq.png",y="/myblog/assets/img/image-20231124103617-02m3kdk.png",b="/myblog/assets/img/image-20231124103631-2rds0uh.png",q="/myblog/assets/img/image-20231124141159-sexpi9g.png",_="/myblog/assets/img/image-20231124142908-6v58xcu.png",h="/myblog/assets/img/image-20231124153502-fphwgp7.png",w="/myblog/assets/img/image-20231124153712-l3wqpve.png",x="/myblog/assets/img/image-20231124153739-anuozv8.png",E="/myblog/assets/img/image-20231124153907-emoxbgz.png",f="/myblog/assets/img/image-20231124153936-p4wqwmw.png",L="/myblog/assets/img/image-20231124154005-ji2b08b.png",N="/myblog/assets/img/image-20231124154043-z270xhd.png",T="/myblog/assets/img/image-20231124154107-1orcw2z.png",M="/myblog/assets/img/image-20231124154120-olfznih.png",A={},R=a(`<h2 id="数据准备" tabindex="-1"><a class="header-anchor" href="#数据准备"><span>数据准备</span></a></h2><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>employees<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;姓名&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>age<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;0&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;年龄&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>position<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;职位&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>hire_time<span class="token punctuation">\`</span></span> <span class="token keyword">timestamp</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;入职时间&#39;</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">\`</span>idx_name_age_position<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>age<span class="token punctuation">\`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>position<span class="token punctuation">\`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">&#39;员工记录表&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> employees<span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>position<span class="token punctuation">,</span>hire_time<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;LiLei&#39;</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token string">&#39;manager&#39;</span><span class="token punctuation">,</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> employees<span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>position<span class="token punctuation">,</span>hire_time<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;HanMeimei&#39;</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span><span class="token string">&#39;dev&#39;</span><span class="token punctuation">,</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> employees<span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>position<span class="token punctuation">,</span>hire_time<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;Lucy&#39;</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token string">&#39;dev&#39;</span><span class="token punctuation">,</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 插入一些示例数据</span>
<span class="token keyword">drop</span> <span class="token keyword">procedure</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> insert_emp<span class="token punctuation">;</span> 
<span class="token keyword">delimiter</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">create</span> <span class="token keyword">procedure</span> insert_emp<span class="token punctuation">(</span><span class="token punctuation">)</span>      
<span class="token keyword">begin</span>
  <span class="token keyword">declare</span> i <span class="token keyword">int</span><span class="token punctuation">;</span>                  
  <span class="token keyword">set</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                        
  <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token keyword">do</span>               
    <span class="token keyword">insert</span> <span class="token keyword">into</span> employees<span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>position<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span>CONCAT<span class="token punctuation">(</span><span class="token string">&#39;zhuge&#39;</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token string">&#39;dev&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">set</span> i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                     
  <span class="token keyword">end</span> <span class="token keyword">while</span><span class="token punctuation">;</span>
<span class="token keyword">end</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">delimiter</span> <span class="token punctuation">;</span>
<span class="token keyword">call</span> insert_emp<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="举一个不容易理解的综合例子" tabindex="-1"><a class="header-anchor" href="#举一个不容易理解的综合例子"><span>举一个不容易理解的综合例子</span></a></h2><h3 id="_1、联合索引第一个字段用范围不会走索引" tabindex="-1"><a class="header-anchor" href="#_1、联合索引第一个字段用范围不会走索引"><span>1、联合索引第一个字段用范围不会走索引</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> name <span class="token operator">&gt;</span> <span class="token string">&#39;LiLei&#39;</span> <span class="token operator">AND</span> age <span class="token operator">=</span> <span class="token number">22</span> <span class="token operator">AND</span> position <span class="token operator">=</span><span class="token string">&#39;manager&#39;</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​<img src="`+u+`" alt="image">​</p><p><strong>结论：</strong> 联合索引第一个字段就用范围查找不会走索引，mysql内部可能觉得第一个字段就用范围，结果集应该很大，回表效率不高，还不如就全表扫描</p><h3 id="_2、强制走索引" tabindex="-1"><a class="header-anchor" href="#_2、强制走索引"><span>2、强制走索引</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">force</span> <span class="token keyword">index</span><span class="token punctuation">(</span>idx_name_age_position<span class="token punctuation">)</span> <span class="token keyword">WHERE</span> name <span class="token operator">&gt;</span> <span class="token string">&#39;LiLei&#39;</span> <span class="token operator">AND</span> age <span class="token operator">=</span> <span class="token number">22</span> <span class="token operator">AND</span> position <span class="token operator">=</span><span class="token string">&#39;manager&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​<img src="`+k+`" alt="image">​</p><p><strong>结论：</strong> 虽然使用了强制走索引让联合索引第一个字段范围查找也走索引，扫描的行rows看上去也少了点，但是最终查找效率不一定比全表扫描高，因为回表效率不高</p><p><strong>做了一个小实验：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 关闭查询缓存</span>
<span class="token keyword">set</span> <span class="token keyword">global</span> query_cache_size<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  
<span class="token keyword">set</span> <span class="token keyword">global</span> query_cache_type<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment">-- 执行时间0.333s</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> name <span class="token operator">&gt;</span> <span class="token string">&#39;LiLei&#39;</span><span class="token punctuation">;</span>
<span class="token comment">-- 执行时间0.444s</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">force</span> <span class="token keyword">index</span><span class="token punctuation">(</span>idx_name_age_position<span class="token punctuation">)</span> <span class="token keyword">WHERE</span> name <span class="token operator">&gt;</span> <span class="token string">&#39;LiLei&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、覆盖索引优化" tabindex="-1"><a class="header-anchor" href="#_3、覆盖索引优化"><span>3、覆盖索引优化</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>position <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> name <span class="token operator">&gt;</span> <span class="token string">&#39;LiLei&#39;</span> <span class="token operator">AND</span> age <span class="token operator">=</span> <span class="token number">22</span> <span class="token operator">AND</span> position <span class="token operator">=</span><span class="token string">&#39;manager&#39;</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​<img src="`+n+`" alt="image">​</p><h3 id="_4、in和or在表数据量比较大的情况会走索引-在表记录不多的情况下会选择全表扫描" tabindex="-1"><a class="header-anchor" href="#_4、in和or在表数据量比较大的情况会走索引-在表记录不多的情况下会选择全表扫描"><span>4、in和or在表数据量比较大的情况会走索引，在表记录不多的情况下会选择全表扫描</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> name <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">&#39;LiLei&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;HanMeimei&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Lucy&#39;</span><span class="token punctuation">)</span> <span class="token operator">AND</span> age <span class="token operator">=</span> <span class="token number">22</span> <span class="token operator">AND</span> position <span class="token operator">=</span><span class="token string">&#39;manager&#39;</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​<img src="`+d+`" alt="image">​</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> <span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&#39;LiLei&#39;</span> <span class="token operator">or</span> name <span class="token operator">=</span> <span class="token string">&#39;HanMeimei&#39;</span><span class="token punctuation">)</span> <span class="token operator">AND</span> age <span class="token operator">=</span> <span class="token number">22</span> <span class="token operator">AND</span> position <span class="token operator">=</span><span class="token string">&#39;manager&#39;</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​<img src="`+m+`" alt="image">​</p><p>做一个小实验，将employees 表复制一张employees_copy的表，里面保留两三条记录</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees_copy <span class="token keyword">WHERE</span> name <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">&#39;LiLei&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;HanMeimei&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Lucy&#39;</span><span class="token punctuation">)</span> <span class="token operator">AND</span> age <span class="token operator">=</span> <span class="token number">22</span> <span class="token operator">AND</span> position <span class="token operator">=</span><span class="token string">&#39;manager&#39;</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​<img src="`+g+`" alt="image">​</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees_copy <span class="token keyword">WHERE</span> <span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&#39;LiLei&#39;</span> <span class="token operator">or</span> name <span class="token operator">=</span> <span class="token string">&#39;HanMeimei&#39;</span><span class="token punctuation">)</span> <span class="token operator">AND</span> age <span class="token operator">=</span> <span class="token number">22</span> <span class="token operator">AND</span> position <span class="token operator">=</span><span class="token string">&#39;manager&#39;</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​<img src="`+v+`" alt="image">​</p><h3 id="_5、like-kk-一般情况都会走索引" tabindex="-1"><a class="header-anchor" href="#_5、like-kk-一般情况都会走索引"><span>5、like KK% 一般情况都会走索引</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> name <span class="token operator">like</span> <span class="token string">&#39;LiLei%&#39;</span> <span class="token operator">AND</span> age <span class="token operator">=</span> <span class="token number">22</span> <span class="token operator">AND</span> position <span class="token operator">=</span><span class="token string">&#39;manager&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​<img src="`+y+`" alt="image">​</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees_copy <span class="token keyword">WHERE</span> name <span class="token operator">like</span> <span class="token string">&#39;LiLei%&#39;</span> <span class="token operator">AND</span> age <span class="token operator">=</span> <span class="token number">22</span> <span class="token operator">AND</span> position <span class="token operator">=</span><span class="token string">&#39;manager&#39;</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​<img src="`+b+`" alt="image">​</p><p>这里有一个索引下推（Index Condition Pushdown，ICP）的概念，like KK%其实就是用到了索引下推优化</p><div class="hint-container info"><p class="hint-container-title">索引下推</p><p>对于辅助的联合索引(name,age,position)，正常情况按照最左前缀原则，如</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> name <span class="token operator">like</span> <span class="token string">&#39;LiLei%&#39;</span> <span class="token operator">AND</span> age <span class="token operator">=</span> <span class="token number">22</span> <span class="token operator">AND</span> position <span class="token operator">=</span><span class="token string">&#39;manager&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这种情况只会走name字段索引，因为根据name字段过滤完，得到的索引行里的age和position是无序的，无法很好的利用索引。</p><p>在MySQL5.6之前的版本，这个查询只能在联合索引里匹配到名字是 &#39;LiLei&#39; 开头的索引，然后拿这些索引对应的主键逐个回表，到主键索引上找出相应的记录，再比对age和position这两个字段的值是否符合。</p><p>MySQL 5.6引入了索引下推优化，可以在<strong>索引遍历过程中，对索引中包含的所有字段先做判断</strong>​，过滤掉不符合条件的记录之后再回表，可以有效的减少回表次数。使用了索引下推优化后，上面那个查询在联合索引里匹配到名字是 &#39;LiLei&#39; 开头的索引之后，同时还会在索引里过滤age和position这两个字段，拿着过滤完剩下的索引对应的主键id再回表查整行数据。</p><p>索引下推会减少回表次数，对于innodb引擎的表索引下推只能用于<strong>二级索引</strong>，innodb的主键索引（聚簇索引）的叶子节点上保存的是全行数据，所以这个时候索引下推并不会起到减少查询全行数据的效果。</p><h2 id="为什么范围查找mysql没有用索引下推优化" tabindex="-1"><a class="header-anchor" href="#为什么范围查找mysql没有用索引下推优化"><span>为什么范围查找Mysql没有用索引下推优化？</span></a></h2><p>应该是Mysql认为范围查找过滤的结果集过大，like KK% 在绝大多数情况来看，过滤后的结果集比较小，所以这里Mysql选择给 like KK% 用了索引下推优化，当然这也不是绝对的，有时like KK% 也不一定就会走索引下推。</p></div><h2 id="mysql如何选择合适的索引" tabindex="-1"><a class="header-anchor" href="#mysql如何选择合适的索引"><span>Mysql如何选择合适的索引</span></a></h2><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">EXPLAIN</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees <span class="token keyword">where</span> name <span class="token operator">&gt;</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​<img src="`+q+`" alt="image">​</p><p>如果用name索引需要遍历name字段联合索引树，然后还需要根据遍历出来的主键值去主键索引树里再去查出最终数据，成本比全表扫描还高，可以用覆盖索引优化，这样只需要遍历name字段的联合索引树就能拿到所有结果，如下：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">EXPLAIN</span> <span class="token keyword">select</span> name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>position <span class="token keyword">from</span> employees <span class="token keyword">where</span> name <span class="token operator">&gt;</span> <span class="token string">&#39;a&#39;</span> <span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​​<img src="`+n+`" alt="image">​​</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">EXPLAIN</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees <span class="token keyword">where</span> name <span class="token operator">&gt;</span> <span class="token string">&#39;zzz&#39;</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​<img src="`+_+`" alt="image">​</p><p>对于上面这两种 name&gt;&#39;a&#39; 和 name&gt;&#39;zzz&#39; 的执行结果，mysql最终是否选择走索引或者一张表涉及多个索引，mysql最终如何选择索引，我们可以用<strong>trace工具</strong>来一查究竟，开启trace工具会影响mysql性能，所以只能临时分析sql使用，用完之后立即关闭</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">set</span> <span class="token keyword">session</span> optimizer_trace<span class="token operator">=</span><span class="token string">&quot;enabled=on&quot;</span><span class="token punctuation">,</span>end_markers_in_json<span class="token operator">=</span><span class="token keyword">on</span><span class="token punctuation">;</span>  <span class="token comment">--开启trace</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees <span class="token keyword">where</span> name <span class="token operator">&gt;</span> <span class="token string">&#39;a&#39;</span> <span class="token keyword">order</span> <span class="token keyword">by</span> position<span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span>OPTIMIZER_TRACE<span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看trace字段：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;steps&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;join_preparation&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>    --第一阶段：SQL准备阶段，格式化sql
        <span class="token property">&quot;select#&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token property">&quot;steps&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token punctuation">{</span>
            <span class="token property">&quot;expanded_query&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/* select#1 */ select \`employees\`.\`id\` AS \`id\`,\`employees\`.\`name\` AS \`name\`,\`employees\`.\`age\` AS \`age\`,\`employees\`.\`position\` AS \`position\`,\`employees\`.\`hire_time\` AS \`hire_time\` from \`employees\` where (\`employees\`.\`name\` &gt; &#39;a&#39;) order by \`employees\`.\`position\`&quot;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">]</span> <span class="token comment">/* steps */</span>
      <span class="token punctuation">}</span> <span class="token comment">/* join_preparation */</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;join_optimization&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>    --第二阶段：SQL优化阶段
        <span class="token property">&quot;select#&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token property">&quot;steps&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token punctuation">{</span>
            <span class="token property">&quot;condition_processing&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>    --条件处理
              <span class="token property">&quot;condition&quot;</span><span class="token operator">:</span> <span class="token string">&quot;WHERE&quot;</span><span class="token punctuation">,</span>
              <span class="token property">&quot;original_condition&quot;</span><span class="token operator">:</span> <span class="token string">&quot;(\`employees\`.\`name\` &gt; &#39;a&#39;)&quot;</span><span class="token punctuation">,</span>
              <span class="token property">&quot;steps&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token punctuation">{</span>
                  <span class="token property">&quot;transformation&quot;</span><span class="token operator">:</span> <span class="token string">&quot;equality_propagation&quot;</span><span class="token punctuation">,</span>
                  <span class="token property">&quot;resulting_condition&quot;</span><span class="token operator">:</span> <span class="token string">&quot;(\`employees\`.\`name\` &gt; &#39;a&#39;)&quot;</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token punctuation">{</span>
                  <span class="token property">&quot;transformation&quot;</span><span class="token operator">:</span> <span class="token string">&quot;constant_propagation&quot;</span><span class="token punctuation">,</span>
                  <span class="token property">&quot;resulting_condition&quot;</span><span class="token operator">:</span> <span class="token string">&quot;(\`employees\`.\`name\` &gt; &#39;a&#39;)&quot;</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token punctuation">{</span>
                  <span class="token property">&quot;transformation&quot;</span><span class="token operator">:</span> <span class="token string">&quot;trivial_condition_removal&quot;</span><span class="token punctuation">,</span>
                  <span class="token property">&quot;resulting_condition&quot;</span><span class="token operator">:</span> <span class="token string">&quot;(\`employees\`.\`name\` &gt; &#39;a&#39;)&quot;</span>
                <span class="token punctuation">}</span>
              <span class="token punctuation">]</span> <span class="token comment">/* steps */</span>
            <span class="token punctuation">}</span> <span class="token comment">/* condition_processing */</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">{</span>
            <span class="token property">&quot;substitute_generated_columns&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token punctuation">}</span> <span class="token comment">/* substitute_generated_columns */</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">{</span>
            <span class="token property">&quot;table_dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>    --表依赖详情
              <span class="token punctuation">{</span>
                <span class="token property">&quot;table&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\`employees\`&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;row_may_be_null&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                <span class="token property">&quot;map_bit&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
                <span class="token property">&quot;depends_on_map_bits&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token punctuation">]</span> <span class="token comment">/* depends_on_map_bits */</span>
              <span class="token punctuation">}</span>
            <span class="token punctuation">]</span> <span class="token comment">/* table_dependencies */</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">{</span>
            <span class="token property">&quot;ref_optimizer_key_uses&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token punctuation">]</span> <span class="token comment">/* ref_optimizer_key_uses */</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">{</span>
            <span class="token property">&quot;rows_estimation&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>    --预估表的访问成本
              <span class="token punctuation">{</span>
                <span class="token property">&quot;table&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\`employees\`&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;range_analysis&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                  <span class="token property">&quot;table_scan&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>     --全表扫描情况
                    <span class="token property">&quot;rows&quot;</span><span class="token operator">:</span> <span class="token number">10123</span><span class="token punctuation">,</span>    --扫描行数
                    <span class="token property">&quot;cost&quot;</span><span class="token operator">:</span> <span class="token number">2054.7</span>    --查询成本
                  <span class="token punctuation">}</span> <span class="token comment">/* table_scan */</span><span class="token punctuation">,</span>
                  <span class="token property">&quot;potential_range_indexes&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>    --查询可能使用的索引
                    <span class="token punctuation">{</span>
                      <span class="token property">&quot;index&quot;</span><span class="token operator">:</span> <span class="token string">&quot;PRIMARY&quot;</span><span class="token punctuation">,</span>    --主键索引
                      <span class="token property">&quot;usable&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                      <span class="token property">&quot;cause&quot;</span><span class="token operator">:</span> <span class="token string">&quot;not_applicable&quot;</span>
                    <span class="token punctuation">}</span><span class="token punctuation">,</span>
                    <span class="token punctuation">{</span>
                      <span class="token property">&quot;index&quot;</span><span class="token operator">:</span> <span class="token string">&quot;idx_name_age_position&quot;</span><span class="token punctuation">,</span>    --辅助索引
                      <span class="token property">&quot;usable&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                      <span class="token property">&quot;key_parts&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                        <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span>
                        <span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span>
                        <span class="token string">&quot;position&quot;</span><span class="token punctuation">,</span>
                        <span class="token string">&quot;id&quot;</span>
                      <span class="token punctuation">]</span> <span class="token comment">/* key_parts */</span>
                    <span class="token punctuation">}</span>
                  <span class="token punctuation">]</span> <span class="token comment">/* potential_range_indexes */</span><span class="token punctuation">,</span>
                  <span class="token property">&quot;setup_range_conditions&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                  <span class="token punctuation">]</span> <span class="token comment">/* setup_range_conditions */</span><span class="token punctuation">,</span>
                  <span class="token property">&quot;group_index_range&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                    <span class="token property">&quot;chosen&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;cause&quot;</span><span class="token operator">:</span> <span class="token string">&quot;not_group_by_or_distinct&quot;</span>
                  <span class="token punctuation">}</span> <span class="token comment">/* group_index_range */</span><span class="token punctuation">,</span>
                  <span class="token property">&quot;analyzing_range_alternatives&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>    --分析各个索引使用成本
                    <span class="token property">&quot;range_scan_alternatives&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                      <span class="token punctuation">{</span>
                        <span class="token property">&quot;index&quot;</span><span class="token operator">:</span> <span class="token string">&quot;idx_name_age_position&quot;</span><span class="token punctuation">,</span>
                        <span class="token property">&quot;ranges&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                          <span class="token string">&quot;a &lt; name&quot;</span>      --索引使用范围
                        <span class="token punctuation">]</span> <span class="token comment">/* ranges */</span><span class="token punctuation">,</span>
                        <span class="token property">&quot;index_dives_for_eq_ranges&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                        <span class="token property">&quot;rowid_ordered&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    --使用该索引获取的记录是否按照主键排序
                        <span class="token property">&quot;using_mrr&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                        <span class="token property">&quot;index_only&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>       --是否使用覆盖索引
                        <span class="token property">&quot;rows&quot;</span><span class="token operator">:</span> <span class="token number">5061</span><span class="token punctuation">,</span>              --索引扫描行数
                        <span class="token property">&quot;cost&quot;</span><span class="token operator">:</span> <span class="token number">6074.2</span><span class="token punctuation">,</span>            --索引使用成本
                        <span class="token property">&quot;chosen&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>           --是否选择该索引
                        <span class="token property">&quot;cause&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cost&quot;</span>
                      <span class="token punctuation">}</span>
                    <span class="token punctuation">]</span> <span class="token comment">/* range_scan_alternatives */</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;analyzing_roworder_intersect&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                      <span class="token property">&quot;usable&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                      <span class="token property">&quot;cause&quot;</span><span class="token operator">:</span> <span class="token string">&quot;too_few_roworder_scans&quot;</span>
                    <span class="token punctuation">}</span> <span class="token comment">/* analyzing_roworder_intersect */</span>
                  <span class="token punctuation">}</span> <span class="token comment">/* analyzing_range_alternatives */</span>
                <span class="token punctuation">}</span> <span class="token comment">/* range_analysis */</span>
              <span class="token punctuation">}</span>
            <span class="token punctuation">]</span> <span class="token comment">/* rows_estimation */</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">{</span>
            <span class="token property">&quot;considered_execution_plans&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
              <span class="token punctuation">{</span>
                <span class="token property">&quot;plan_prefix&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token punctuation">]</span> <span class="token comment">/* plan_prefix */</span><span class="token punctuation">,</span>
                <span class="token property">&quot;table&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\`employees\`&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;best_access_path&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>    --最优访问路径
                  <span class="token property">&quot;considered_access_paths&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>   --最终选择的访问路径
                    <span class="token punctuation">{</span>
                      <span class="token property">&quot;rows_to_scan&quot;</span><span class="token operator">:</span> <span class="token number">10123</span><span class="token punctuation">,</span>
                      <span class="token property">&quot;access_type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;scan&quot;</span><span class="token punctuation">,</span>     --访问类型：为scan，全表扫描
                      <span class="token property">&quot;resulting_rows&quot;</span><span class="token operator">:</span> <span class="token number">10123</span><span class="token punctuation">,</span>
                      <span class="token property">&quot;cost&quot;</span><span class="token operator">:</span> <span class="token number">2052.6</span><span class="token punctuation">,</span>
                      <span class="token property">&quot;chosen&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            --确定选择
                      <span class="token property">&quot;use_tmp_table&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
                    <span class="token punctuation">}</span>
                  <span class="token punctuation">]</span> <span class="token comment">/* considered_access_paths */</span>
                <span class="token punctuation">}</span> <span class="token comment">/* best_access_path */</span><span class="token punctuation">,</span>
                <span class="token property">&quot;condition_filtering_pct&quot;</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
                <span class="token property">&quot;rows_for_plan&quot;</span><span class="token operator">:</span> <span class="token number">10123</span><span class="token punctuation">,</span>
                <span class="token property">&quot;cost_for_plan&quot;</span><span class="token operator">:</span> <span class="token number">2052.6</span><span class="token punctuation">,</span>
                <span class="token property">&quot;sort_cost&quot;</span><span class="token operator">:</span> <span class="token number">10123</span><span class="token punctuation">,</span>
                <span class="token property">&quot;new_cost_for_plan&quot;</span><span class="token operator">:</span> <span class="token number">12176</span><span class="token punctuation">,</span>
                <span class="token property">&quot;chosen&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
              <span class="token punctuation">}</span>
            <span class="token punctuation">]</span> <span class="token comment">/* considered_execution_plans */</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">{</span>
            <span class="token property">&quot;attaching_conditions_to_tables&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
              <span class="token property">&quot;original_condition&quot;</span><span class="token operator">:</span> <span class="token string">&quot;(\`employees\`.\`name\` &gt; &#39;a&#39;)&quot;</span><span class="token punctuation">,</span>
              <span class="token property">&quot;attached_conditions_computation&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
              <span class="token punctuation">]</span> <span class="token comment">/* attached_conditions_computation */</span><span class="token punctuation">,</span>
              <span class="token property">&quot;attached_conditions_summary&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token punctuation">{</span>
                  <span class="token property">&quot;table&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\`employees\`&quot;</span><span class="token punctuation">,</span>
                  <span class="token property">&quot;attached&quot;</span><span class="token operator">:</span> <span class="token string">&quot;(\`employees\`.\`name\` &gt; &#39;a&#39;)&quot;</span>
                <span class="token punctuation">}</span>
              <span class="token punctuation">]</span> <span class="token comment">/* attached_conditions_summary */</span>
            <span class="token punctuation">}</span> <span class="token comment">/* attaching_conditions_to_tables */</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">{</span>
            <span class="token property">&quot;clause_processing&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
              <span class="token property">&quot;clause&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ORDER BY&quot;</span><span class="token punctuation">,</span>
              <span class="token property">&quot;original_clause&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\`employees\`.\`position\`&quot;</span><span class="token punctuation">,</span>
              <span class="token property">&quot;items&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token punctuation">{</span>
                  <span class="token property">&quot;item&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\`employees\`.\`position\`&quot;</span>
                <span class="token punctuation">}</span>
              <span class="token punctuation">]</span> <span class="token comment">/* items */</span><span class="token punctuation">,</span>
              <span class="token property">&quot;resulting_clause_is_simple&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
              <span class="token property">&quot;resulting_clause&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\`employees\`.\`position\`&quot;</span>
            <span class="token punctuation">}</span> <span class="token comment">/* clause_processing */</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">{</span>
            <span class="token property">&quot;reconsidering_access_paths_for_index_ordering&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
              <span class="token property">&quot;clause&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ORDER BY&quot;</span><span class="token punctuation">,</span>
              <span class="token property">&quot;steps&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
              <span class="token punctuation">]</span> <span class="token comment">/* steps */</span><span class="token punctuation">,</span>
              <span class="token property">&quot;index_order_summary&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token property">&quot;table&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\`employees\`&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;index_provides_order&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                <span class="token property">&quot;order_direction&quot;</span><span class="token operator">:</span> <span class="token string">&quot;undefined&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;index&quot;</span><span class="token operator">:</span> <span class="token string">&quot;unknown&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;plan_changed&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>
              <span class="token punctuation">}</span> <span class="token comment">/* index_order_summary */</span>
            <span class="token punctuation">}</span> <span class="token comment">/* reconsidering_access_paths_for_index_ordering */</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">{</span>
            <span class="token property">&quot;refine_plan&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
              <span class="token punctuation">{</span>
                <span class="token property">&quot;table&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\`employees\`&quot;</span>
              <span class="token punctuation">}</span>
            <span class="token punctuation">]</span> <span class="token comment">/* refine_plan */</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">]</span> <span class="token comment">/* steps */</span>
      <span class="token punctuation">}</span> <span class="token comment">/* join_optimization */</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;join_execution&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>    --第三阶段：SQL执行阶段
        <span class="token property">&quot;select#&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token property">&quot;steps&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">]</span> <span class="token comment">/* steps */</span>
      <span class="token punctuation">}</span> <span class="token comment">/* join_execution */</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span> <span class="token comment">/* steps */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结论：全表扫描的成本低于索引扫描，所以mysql最终选择全表扫描</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees <span class="token keyword">where</span> name <span class="token operator">&gt;</span> <span class="token string">&#39;zzz&#39;</span> <span class="token keyword">order</span> <span class="token keyword">by</span> position<span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span>OPTIMIZER_TRACE<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>查看trace字段可知索引扫描的成本低于全表扫描，所以mysql最终选择索引扫描</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">set</span> <span class="token keyword">session</span> optimizer_trace<span class="token operator">=</span><span class="token string">&quot;enabled=off&quot;</span><span class="token punctuation">;</span>    <span class="token comment">--关闭trace</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="常见sql深入优化" tabindex="-1"><a class="header-anchor" href="#常见sql深入优化"><span>常见sql深入优化</span></a></h2><h3 id="order-by与group-by优化" tabindex="-1"><a class="header-anchor" href="#order-by与group-by优化"><span>Order by与Group by优化</span></a></h3><p><strong>Case1：</strong></p><p>​<img src="`+h+'" alt="image">​</p><p><strong>分析：</strong> 利用最左前缀法则：中间字段不能断，因此查询用到了name索引，从key_len=74也能看出，age索引列用在排序过程中，因为Extra字段里有using index condition</p><p><strong>Case 2：</strong></p><p>​<img src="'+w+'" alt="image">​</p><p><strong>分析：</strong></p>',57),C=a('<p><strong>Case 3：</strong></p><p>​<img src="'+x+'" alt="image">​</p><p><strong>分析：</strong> 查找只用到索引name，age和position用于排序，无Using filesort。</p><p><strong>Case 4：</strong></p><p>​<img src="'+E+'" alt="image">​</p><p><strong>分析：</strong> 和Case 3中explain的执行结果一样，但是出现了Using filesort，因为索引的创建顺序为name,age,position，但是排序的时候age和position颠倒位置了。</p><p><strong>Case 5：</strong></p><p>​<img src="'+f+'" alt="image">​</p><p><strong>分析：</strong> 与Case 4对比，在Extra中并未出现Using filesort，因为age为常量，在排序中被优化，所以索引未颠倒，不会出现Using filesort。</p><p><strong>Case 6：</strong></p><p>​<img src="'+L+'" alt="image">​</p><p><strong>分析：</strong> 虽然排序的字段列与索引顺序一样，且order by默认升序，这里position desc变成了降序，导致与索引的排序方式不同，从而产生Using filesort。Mysql8以上版本有降序索引可以支持该种查询方式。</p><p><strong>Case 7：</strong></p><p>​<img src="'+N+'" alt="image">​</p><p><strong>分析：</strong> 对于排序来说，多个相等条件也是范围查询</p><p><strong>Case 8：</strong></p><p>​<img src="'+T+'" alt="image">​</p><p>可以用覆盖索引优化</p><p>​<img src="'+M+`" alt="image">​</p><p><strong>优化总结：</strong></p><ul><li>MySQL支持两种方式的排序filesort和index，Using index是指MySQL扫描索引本身完成排序。index效率高，相对的filesort效率低。</li><li>order by满足两种情况会使用Using index。 <ul><li>order by语句使用索引最左前列。</li><li>使用where子句与order by子句条件列组合满足索引最左前列。</li></ul></li><li>尽量在索引列上完成排序，遵循索引建立（索引创建的顺序）时的最左前缀法则。</li><li>如果order by的条件不在索引列上，就会产生Using filesort。</li><li>能用覆盖索引尽量用覆盖索引</li><li>group by与order by很类似，其实质是先排序后分组，遵照索引创建顺序的最左前缀法则。对于group by的优化如果不需要排序的可以加上order by null禁止排序。注意，where高于having，能写在where中的限定条件就不要去having限定了。</li></ul><h2 id="索引设计原则" tabindex="-1"><a class="header-anchor" href="#索引设计原则"><span>索引设计原则</span></a></h2><h3 id="_1、代码先行-索引后上" tabindex="-1"><a class="header-anchor" href="#_1、代码先行-索引后上"><span>1、代码先行，索引后上</span></a></h3><p>一般是怎么给数据表建立索引的，是建完表马上就建立索引吗？<br> 这其实是不对的，一般应该等到主体业务功能开发完毕，把涉及到该表相关sql都要拿出来分析之后再建立索引。</p><h3 id="_2、联合索引尽量覆盖查询条件" tabindex="-1"><a class="header-anchor" href="#_2、联合索引尽量覆盖查询条件"><span>2、联合索引尽量覆盖查询条件</span></a></h3><p>比如可以设计一个或者两三个联合索引(尽量少建单值索引)，让每一个联合索引都尽量去包含sql语句里的where、order by、group by的字段，还要确保这些联合索引的字段顺序尽量满足sql查询的最左前缀原则。</p><h3 id="_3、不在小基数字段上建立索引" tabindex="-1"><a class="header-anchor" href="#_3、不在小基数字段上建立索引"><span>3、不在小基数字段上建立索引</span></a></h3><p>索引基数是指这个字段在表里总共有多少个不同的值，比如一张表总共100万行记录，其中有个性别字段，其值不是男就是女，那么该字段的基数就是2。<br> 如果对这种小基数字段建立索引的话，还不如全表扫描了，因为你的索引树里就包含男和女两种值，根本没法进行快速的二分查找，那用索引就没有太大的意义了。<br><strong>一般建立索引，尽量使用那些基数比较大的字段，就是值比较多的字段</strong>，那么才能发挥出B+树快速二分查找的优势来。</p><h3 id="_4、长字符串我们可以采用前缀索引" tabindex="-1"><a class="header-anchor" href="#_4、长字符串我们可以采用前缀索引"><span>4、长字符串我们可以采用前缀索引</span></a></h3><p>尽量对字段类型较小的列设计索引，比如说什么tinyint之类的，因为字段类型较小的话，占用磁盘空间也会比较小，此时你在搜索的时候性能也会比较好一点。</p><p>当然，这个所谓的字段类型小一点的列，也不是绝对的，很多时候你就是要针对varchar(255)这种字段建立索引，哪怕多占用一些磁盘空间也是有必要的。</p><p>对于这种varchar(255)的大字段可能会比较占用磁盘空间，可以稍微优化下，比如针对这个字段的前20个字符建立索引，就是说，对这个字段里的每个值的前20个字符放在索引树里，类似于 KEY index(name(20),age,position)。</p><p>此时你在where条件里搜索的时候，如果是根据name字段来搜索，那么此时就会先到索引树里根据name字段的前20个字符去搜索，定位到之后前20个字符的前缀匹配的部分数据之后，再回到聚簇索引提取出来完整的name字段值进行比对。</p><p>但是假如你要是order by name，那么此时你的name因为在索引树里仅仅包含了前20个字符，所以这个排序是没法用上索引的， group by也是同理。所以这里大家要对前缀索引有一个了解。</p><h3 id="_5、where与order-by冲突时优先where" tabindex="-1"><a class="header-anchor" href="#_5、where与order-by冲突时优先where"><span>5、where与order by冲突时优先where</span></a></h3><p>在where和order by出现索引设计冲突时，到底是针对where去设计索引，还是针对order by设计索引？到底是让where去用上索引，还是让order by用上索引?</p><p>一般这种时候往往都是让where条件去使用索引来快速筛选出来一部分指定的数据，接着再进行排序。</p><p>因为大多数情况基于索引进行where筛选往往可以最快速度筛选出你要的少部分数据，然后做排序的成本可能会小很多。</p><h3 id="_6、基于慢sql查询做优化" tabindex="-1"><a class="header-anchor" href="#_6、基于慢sql查询做优化"><span>6、基于慢sql查询做优化</span></a></h3><p>可以根据监控后台的一些慢sql，针对这些慢sql查询做特定的索引优化。</p><h2 id="索引设计实战" tabindex="-1"><a class="header-anchor" href="#索引设计实战"><span>索引设计实战</span></a></h2><p>以社交场景APP来举例，我们一般会去搜索一些好友，这里面就涉及到对用户信息的筛选，这里肯定就是对用户user表搜索了，这个表一般来说数据量会比较大，我们先不考虑分库分表的情况，比如，我们一般会筛选地区(省市)，性别，年龄，身高，爱好之类的，有的APP可能用户还有评分，比如用户的受欢迎程度评分，我们可能还会根据评分来排序等等。</p><p>对于后台程序来说除了过滤用户的各种条件，还需要分页之类的处理，可能会生成类似sql语句执行：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code> <span class="token keyword">select</span> xx <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> xx<span class="token operator">=</span>xx <span class="token operator">and</span> xx<span class="token operator">=</span>xx <span class="token keyword">order</span> <span class="token keyword">by</span> xx <span class="token keyword">limit</span> xx<span class="token punctuation">,</span>xx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对于这种情况如何合理设计索引，比如用户可能经常会根据省市优先筛选同城的用户，还有根据性别去筛选，那我们是否应该设计一个联合索引(province,city,sex) 了？这些字段好像基数都不大，其实是应该的，因为这些字段查询太频繁了，设计索引后可以减少回表的操作。</p><p>假设又有用户根据年龄范围去筛选了，比如 where province=xx and city=xx and age&gt;=xx and age&lt;=xx，我们尝试着把age字段加入联合索引 (province,city,sex,age)，注意，<strong>一般这种范围查找的条件都要放在最后，之前讲过联合索引范围之后条件的是不能用索引的</strong>，但是对于当前这种情况依然用不到age这个索引字段，因为用户没有筛选sex字段，那怎么优化了？其实我们可以这么来优化下sql的写法：where province=xx and city=xx and sex in (&#39;female&#39;,&#39;male&#39;) and age&gt;=xx and age&lt;=xx</p><p>对于爱好之类的字段也可以类似sex字段处理，所以可以把爱好字段也加入索引 (province,city,sex,hobby,age)</p><p>假设可能还有一个筛选条件，比如要筛选最近一周登录过的用户，一般大家肯定希望跟活跃用户交友了，这样能尽快收到反馈，对应后台sql可能是这样：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">where</span> province<span class="token operator">=</span>xx <span class="token operator">and</span> city<span class="token operator">=</span>xx <span class="token operator">and</span> sex <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">&#39;female&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;male&#39;</span><span class="token punctuation">)</span> <span class="token operator">and</span> age<span class="token operator">&gt;=</span>xx <span class="token operator">and</span> age<span class="token operator">&lt;=</span>xx <span class="token operator">and</span> latest_login_time<span class="token operator">&gt;=</span> xx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>那我们是否能把 latest_login_time 字段也加入索引了？比如 (province,city,sex,hobby,age,latest_login_time) ，显然是不行的，那怎么来优化这种情况了？其实我们可以试着再设计一个字段is_login_in_latest_7_days，用户如果一周内有登录值就为1，否则为0，那么我们就可以把索引设计成 (province,city,sex,hobby,is_login_in_latest_7_days,age) 来满足上面那种场景了！</p><p>一般来说，通过这么一个多字段的索引是能够过滤掉绝大部分数据的，就保留小部分数据下来基于磁盘文件进行order by语句的排序，最后基于limit进行分页，那么一般性能还是比较高的。</p><p>不过有时可能用户会这么来查询，就查下受欢迎度较高的女性，比如sql：where sex = &#39;female&#39; order by score limit xx,xx，那么上面那个索引是很难用上的，不能把太多的字段以及太多的值都用 in 语句拼接到sql里的，那怎么办了？其实我们可以再设计一个辅助的联合索引，比如 (sex,score)，这样就能满足查询要求了。</p><p>索引设计的设计思路，核心思想就是，<strong>尽量利用一两个复杂的多字段联合索引，抗下你80%以上的查询，然后用一两个辅助索引尽量抗下剩余的一些非典型查询</strong>，保证这种大数据量表的查询尽可能多的都能充分利用索引，这样就能保证你的查询速度和性能了！</p>`,53);function O(S,I){const e=t("RouteLink");return o(),l("div",null,[R,c("p",null,[s("从explain的执行结果来看：key_len=74，查询使用了name索引，由于用了position进行排序，跳过了age，出现了"),i(e,{to:"/statudy/Mysql/Using%20filesort%E6%96%87%E4%BB%B6%E6%8E%92%E5%BA%8F%E5%8E%9F%E7%90%86.html"},{default:r(()=>[s("Using filesort")]),_:1}),s("。")]),C])}const D=p(A,[["render",O],["__file","02-Mysql索引优化一.html.vue"]]),P=JSON.parse(`{"path":"/statudy/Mysql/02-Mysql%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96%E4%B8%80.html","title":"02-Mysql索引优化一","lang":"zh-CN","frontmatter":{"title":"02-Mysql索引优化一","order":2,"date":"2024-04-12T00:00:00.000Z","category":["Mysql"],"tag":["Mysql"],"description":"数据准备 举一个不容易理解的综合例子 1、联合索引第一个字段用范围不会走索引 ​image​ 结论： 联合索引第一个字段就用范围查找不会走索引，mysql内部可能觉得第一个字段就用范围，结果集应该很大，回表效率不高，还不如就全表扫描 2、强制走索引 ​image​ 结论： 虽然使用了强制走索引让联合索引第一个字段范围查找也走索引，扫描的行rows看上去...","head":[["meta",{"property":"og:url","content":"https://xsyl06.github.io/myblog/myblog/statudy/Mysql/02-Mysql%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96%E4%B8%80.html"}],["meta",{"property":"og:site_name","content":"Xsyl06的博客"}],["meta",{"property":"og:title","content":"02-Mysql索引优化一"}],["meta",{"property":"og:description","content":"数据准备 举一个不容易理解的综合例子 1、联合索引第一个字段用范围不会走索引 ​image​ 结论： 联合索引第一个字段就用范围查找不会走索引，mysql内部可能觉得第一个字段就用范围，结果集应该很大，回表效率不高，还不如就全表扫描 2、强制走索引 ​image​ 结论： 虽然使用了强制走索引让联合索引第一个字段范围查找也走索引，扫描的行rows看上去..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://xsyl06.github.io/myblog/myblog/assets/img/image-20231124102228-y347wo8.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-16T10:28:03.000Z"}],["meta",{"property":"article:author","content":"xsyl06"}],["meta",{"property":"article:tag","content":"Mysql"}],["meta",{"property":"article:published_time","content":"2024-04-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-16T10:28:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"02-Mysql索引优化一\\",\\"image\\":[\\"https://xsyl06.github.io/myblog/myblog/assets/img/image-20231124102228-y347wo8.png\\",\\"https://xsyl06.github.io/myblog/myblog/assets/img/image-20231124103455-c3nep7f.png\\",\\"https://xsyl06.github.io/myblog/myblog/assets/img/image-20231124103444-qro4gzx.png\\",\\"https://xsyl06.github.io/myblog/myblog/assets/img/image-20231124103514-op88a5t.png\\",\\"https://xsyl06.github.io/myblog/myblog/assets/img/image-20231124103526-cna15it.png\\",\\"https://xsyl06.github.io/myblog/myblog/assets/img/image-20231124103546-ndsr6yn.png\\",\\"https://xsyl06.github.io/myblog/myblog/assets/img/image-20231124103600-663u6lq.png\\",\\"https://xsyl06.github.io/myblog/myblog/assets/img/image-20231124103617-02m3kdk.png\\",\\"https://xsyl06.github.io/myblog/myblog/assets/img/image-20231124103631-2rds0uh.png\\",\\"https://xsyl06.github.io/myblog/myblog/assets/img/image-20231124141159-sexpi9g.png\\",\\"https://xsyl06.github.io/myblog/myblog/assets/img/image-20231124103444-qro4gzx.png\\",\\"https://xsyl06.github.io/myblog/myblog/assets/img/image-20231124142908-6v58xcu.png\\",\\"https://xsyl06.github.io/myblog/myblog/assets/img/image-20231124153502-fphwgp7.png\\",\\"https://xsyl06.github.io/myblog/myblog/assets/img/image-20231124153712-l3wqpve.png\\",\\"https://xsyl06.github.io/myblog/myblog/assets/img/image-20231124153739-anuozv8.png\\",\\"https://xsyl06.github.io/myblog/myblog/assets/img/image-20231124153907-emoxbgz.png\\",\\"https://xsyl06.github.io/myblog/myblog/assets/img/image-20231124153936-p4wqwmw.png\\",\\"https://xsyl06.github.io/myblog/myblog/assets/img/image-20231124154005-ji2b08b.png\\",\\"https://xsyl06.github.io/myblog/myblog/assets/img/image-20231124154043-z270xhd.png\\",\\"https://xsyl06.github.io/myblog/myblog/assets/img/image-20231124154107-1orcw2z.png\\",\\"https://xsyl06.github.io/myblog/myblog/assets/img/image-20231124154120-olfznih.png\\"],\\"datePublished\\":\\"2024-04-12T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-16T10:28:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xsyl06\\",\\"url\\":\\"https://gitee.com/xsyl06\\"}]}"]]},"headers":[{"level":2,"title":"数据准备","slug":"数据准备","link":"#数据准备","children":[]},{"level":2,"title":"举一个不容易理解的综合例子","slug":"举一个不容易理解的综合例子","link":"#举一个不容易理解的综合例子","children":[{"level":3,"title":"1、联合索引第一个字段用范围不会走索引","slug":"_1、联合索引第一个字段用范围不会走索引","link":"#_1、联合索引第一个字段用范围不会走索引","children":[]},{"level":3,"title":"2、强制走索引","slug":"_2、强制走索引","link":"#_2、强制走索引","children":[]},{"level":3,"title":"3、覆盖索引优化","slug":"_3、覆盖索引优化","link":"#_3、覆盖索引优化","children":[]},{"level":3,"title":"4、in和or在表数据量比较大的情况会走索引，在表记录不多的情况下会选择全表扫描","slug":"_4、in和or在表数据量比较大的情况会走索引-在表记录不多的情况下会选择全表扫描","link":"#_4、in和or在表数据量比较大的情况会走索引-在表记录不多的情况下会选择全表扫描","children":[]},{"level":3,"title":"5、like KK% 一般情况都会走索引","slug":"_5、like-kk-一般情况都会走索引","link":"#_5、like-kk-一般情况都会走索引","children":[]}]},{"level":2,"title":"Mysql如何选择合适的索引","slug":"mysql如何选择合适的索引","link":"#mysql如何选择合适的索引","children":[]},{"level":2,"title":"常见sql深入优化","slug":"常见sql深入优化","link":"#常见sql深入优化","children":[{"level":3,"title":"Order by与Group by优化","slug":"order-by与group-by优化","link":"#order-by与group-by优化","children":[]}]},{"level":2,"title":"索引设计原则","slug":"索引设计原则","link":"#索引设计原则","children":[{"level":3,"title":"1、代码先行，索引后上","slug":"_1、代码先行-索引后上","link":"#_1、代码先行-索引后上","children":[]},{"level":3,"title":"2、联合索引尽量覆盖查询条件","slug":"_2、联合索引尽量覆盖查询条件","link":"#_2、联合索引尽量覆盖查询条件","children":[]},{"level":3,"title":"3、不在小基数字段上建立索引","slug":"_3、不在小基数字段上建立索引","link":"#_3、不在小基数字段上建立索引","children":[]},{"level":3,"title":"4、长字符串我们可以采用前缀索引","slug":"_4、长字符串我们可以采用前缀索引","link":"#_4、长字符串我们可以采用前缀索引","children":[]},{"level":3,"title":"5、where与order by冲突时优先where","slug":"_5、where与order-by冲突时优先where","link":"#_5、where与order-by冲突时优先where","children":[]},{"level":3,"title":"6、基于慢sql查询做优化","slug":"_6、基于慢sql查询做优化","link":"#_6、基于慢sql查询做优化","children":[]}]},{"level":2,"title":"索引设计实战","slug":"索引设计实战","link":"#索引设计实战","children":[]}],"git":{"createdTime":1713263283000,"updatedTime":1713263283000,"contributors":[{"name":"Wang","email":"xsyl06@qq.com","commits":1}]},"readingTime":{"minutes":15.31,"words":4592},"filePathRelative":"statudy/Mysql/02-Mysql索引优化一.md","localizedDate":"2024年4月12日","excerpt":"<h2>数据准备</h2>\\n<div class=\\"language-sql\\" data-ext=\\"sql\\" data-title=\\"sql\\"><pre class=\\"language-sql\\"><code><span class=\\"token keyword\\">CREATE</span> <span class=\\"token keyword\\">TABLE</span> <span class=\\"token identifier\\"><span class=\\"token punctuation\\">\`</span>employees<span class=\\"token punctuation\\">\`</span></span> <span class=\\"token punctuation\\">(</span>\\n  <span class=\\"token identifier\\"><span class=\\"token punctuation\\">\`</span>id<span class=\\"token punctuation\\">\`</span></span> <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">11</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">NOT</span> <span class=\\"token boolean\\">NULL</span> <span class=\\"token keyword\\">AUTO_INCREMENT</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token identifier\\"><span class=\\"token punctuation\\">\`</span>name<span class=\\"token punctuation\\">\`</span></span> <span class=\\"token keyword\\">varchar</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">24</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">NOT</span> <span class=\\"token boolean\\">NULL</span> <span class=\\"token keyword\\">DEFAULT</span> <span class=\\"token string\\">''</span> <span class=\\"token keyword\\">COMMENT</span> <span class=\\"token string\\">'姓名'</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token identifier\\"><span class=\\"token punctuation\\">\`</span>age<span class=\\"token punctuation\\">\`</span></span> <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">11</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">NOT</span> <span class=\\"token boolean\\">NULL</span> <span class=\\"token keyword\\">DEFAULT</span> <span class=\\"token string\\">'0'</span> <span class=\\"token keyword\\">COMMENT</span> <span class=\\"token string\\">'年龄'</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token identifier\\"><span class=\\"token punctuation\\">\`</span>position<span class=\\"token punctuation\\">\`</span></span> <span class=\\"token keyword\\">varchar</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">20</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">NOT</span> <span class=\\"token boolean\\">NULL</span> <span class=\\"token keyword\\">DEFAULT</span> <span class=\\"token string\\">''</span> <span class=\\"token keyword\\">COMMENT</span> <span class=\\"token string\\">'职位'</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token identifier\\"><span class=\\"token punctuation\\">\`</span>hire_time<span class=\\"token punctuation\\">\`</span></span> <span class=\\"token keyword\\">timestamp</span> <span class=\\"token operator\\">NOT</span> <span class=\\"token boolean\\">NULL</span> <span class=\\"token keyword\\">DEFAULT</span> <span class=\\"token keyword\\">CURRENT_TIMESTAMP</span> <span class=\\"token keyword\\">COMMENT</span> <span class=\\"token string\\">'入职时间'</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token keyword\\">PRIMARY</span> <span class=\\"token keyword\\">KEY</span> <span class=\\"token punctuation\\">(</span><span class=\\"token identifier\\"><span class=\\"token punctuation\\">\`</span>id<span class=\\"token punctuation\\">\`</span></span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token keyword\\">KEY</span> <span class=\\"token identifier\\"><span class=\\"token punctuation\\">\`</span>idx_name_age_position<span class=\\"token punctuation\\">\`</span></span> <span class=\\"token punctuation\\">(</span><span class=\\"token identifier\\"><span class=\\"token punctuation\\">\`</span>name<span class=\\"token punctuation\\">\`</span></span><span class=\\"token punctuation\\">,</span><span class=\\"token identifier\\"><span class=\\"token punctuation\\">\`</span>age<span class=\\"token punctuation\\">\`</span></span><span class=\\"token punctuation\\">,</span><span class=\\"token identifier\\"><span class=\\"token punctuation\\">\`</span>position<span class=\\"token punctuation\\">\`</span></span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">USING</span> <span class=\\"token keyword\\">BTREE</span>\\n<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">ENGINE</span><span class=\\"token operator\\">=</span><span class=\\"token keyword\\">InnoDB</span> <span class=\\"token keyword\\">AUTO_INCREMENT</span><span class=\\"token operator\\">=</span><span class=\\"token number\\">1</span> <span class=\\"token keyword\\">DEFAULT</span> <span class=\\"token keyword\\">CHARSET</span><span class=\\"token operator\\">=</span>utf8 <span class=\\"token keyword\\">COMMENT</span><span class=\\"token operator\\">=</span><span class=\\"token string\\">'员工记录表'</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">INSERT</span> <span class=\\"token keyword\\">INTO</span> employees<span class=\\"token punctuation\\">(</span>name<span class=\\"token punctuation\\">,</span>age<span class=\\"token punctuation\\">,</span>position<span class=\\"token punctuation\\">,</span>hire_time<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">VALUES</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'LiLei'</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">22</span><span class=\\"token punctuation\\">,</span><span class=\\"token string\\">'manager'</span><span class=\\"token punctuation\\">,</span><span class=\\"token function\\">NOW</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">INSERT</span> <span class=\\"token keyword\\">INTO</span> employees<span class=\\"token punctuation\\">(</span>name<span class=\\"token punctuation\\">,</span>age<span class=\\"token punctuation\\">,</span>position<span class=\\"token punctuation\\">,</span>hire_time<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">VALUES</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'HanMeimei'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">23</span><span class=\\"token punctuation\\">,</span><span class=\\"token string\\">'dev'</span><span class=\\"token punctuation\\">,</span><span class=\\"token function\\">NOW</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">INSERT</span> <span class=\\"token keyword\\">INTO</span> employees<span class=\\"token punctuation\\">(</span>name<span class=\\"token punctuation\\">,</span>age<span class=\\"token punctuation\\">,</span>position<span class=\\"token punctuation\\">,</span>hire_time<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">VALUES</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'Lucy'</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">23</span><span class=\\"token punctuation\\">,</span><span class=\\"token string\\">'dev'</span><span class=\\"token punctuation\\">,</span><span class=\\"token function\\">NOW</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">-- 插入一些示例数据</span>\\n<span class=\\"token keyword\\">drop</span> <span class=\\"token keyword\\">procedure</span> <span class=\\"token keyword\\">if</span> <span class=\\"token keyword\\">exists</span> insert_emp<span class=\\"token punctuation\\">;</span> \\n<span class=\\"token keyword\\">delimiter</span> <span class=\\"token punctuation\\">;</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">create</span> <span class=\\"token keyword\\">procedure</span> insert_emp<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>      \\n<span class=\\"token keyword\\">begin</span>\\n  <span class=\\"token keyword\\">declare</span> i <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">;</span>                  \\n  <span class=\\"token keyword\\">set</span> i<span class=\\"token operator\\">=</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>                        \\n  <span class=\\"token keyword\\">while</span><span class=\\"token punctuation\\">(</span>i<span class=\\"token operator\\">&lt;=</span><span class=\\"token number\\">100000</span><span class=\\"token punctuation\\">)</span><span class=\\"token keyword\\">do</span>               \\n    <span class=\\"token keyword\\">insert</span> <span class=\\"token keyword\\">into</span> employees<span class=\\"token punctuation\\">(</span>name<span class=\\"token punctuation\\">,</span>age<span class=\\"token punctuation\\">,</span>position<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">values</span><span class=\\"token punctuation\\">(</span>CONCAT<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'zhuge'</span><span class=\\"token punctuation\\">,</span>i<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>i<span class=\\"token punctuation\\">,</span><span class=\\"token string\\">'dev'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>  \\n    <span class=\\"token keyword\\">set</span> i<span class=\\"token operator\\">=</span>i<span class=\\"token operator\\">+</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>                     \\n  <span class=\\"token keyword\\">end</span> <span class=\\"token keyword\\">while</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">end</span><span class=\\"token punctuation\\">;</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">delimiter</span> <span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">call</span> insert_emp<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}`);export{D as comp,P as data};
